export interface Lesson {
  id: string;
  title: string;
  description: string;
  duration: string;
  difficulty: 'beginner' | 'intermediate' | 'advanced';
  estimatedTime: number; // in minutes
  videoUrl?: string;
  content: {
    theory: string;
    examples: string[];
    challenge: {
      title: string;
      description: string;
      starterCode: string;
      solution: string;
    };
  };
}

export interface Module {
  id: string;
  title: string;
  description: string;
  icon: string;
  color: string;
  totalLessons: number;
  estimatedHours: number;
  lessons: Lesson[];
}

export const curriculum: Module[] = [
  {
    id: 'html',
    title: 'HTML Fundamentals',
    description: 'Learn the structure of the web with HTML',
    icon: 'üèóÔ∏è',
    color: 'from-orange-400 to-red-500',
    totalLessons: 10,
    estimatedHours: 4,
    lessons: [
      {
        id: 'html-1',
        title: 'Basic Tags',
        description: 'Understanding HTML tags, elements, and document structure including headings and paragraphs',
        duration: '25 min',
        difficulty: 'beginner',
        estimatedTime: 25,
        content: {
          theory: 'HTML (HyperText Markup Language) is the standard markup language for creating web pages. It describes the structure of a web page using a series of elements represented by tags. Every HTML document starts with a DOCTYPE declaration and contains head and body sections. Basic tags include headings (h1-h6), paragraphs (p), and text formatting elements.',
          examples: [
            '<!DOCTYPE html>\n<html>\n<head>\n  <title>My First Page</title>\n</head>\n<body>\n  <h1>Main Heading</h1>\n  <h2>Subheading</h2>\n  <p>This is my first paragraph.</p>\n  <p>This is another paragraph with <strong>bold text</strong> and <em>italic text</em>.</p>\n</body>\n</html>'
          ],
          challenge: {
            title: 'Create Your First HTML Page',
            description: 'Create a simple HTML page with a title, multiple headings, and paragraphs.',
            starterCode: '<!DOCTYPE html>\n<html>\n<head>\n  <!-- Add a title here -->\n</head>\n<body>\n  <!-- Add headings and paragraphs -->\n</body>\n</html>',
            solution: '<!DOCTYPE html>\n<html>\n<head>\n  <title>My First Page</title>\n</head>\n<body>\n  <h1>Welcome to My Website</h1>\n  <h2>About Me</h2>\n  <p>This is my first HTML page!</p>\n  <p>I am learning <strong>web development</strong> and this is <em>exciting</em>!</p>\n</body>\n</html>'
          }
        }
      },
      {
        id: 'html-2',
        title: 'Attributes & Formatting Tags',
        description: 'Learn how to use HTML attributes and formatting tags to enhance your content',
        duration: '30 min',
        difficulty: 'beginner',
        estimatedTime: 30,
        content: {
          theory: 'HTML attributes provide additional information about HTML elements. They are always specified in the start tag and usually come in name/value pairs. Common attributes include id, class, src, href, alt, and style. Formatting tags like <strong>, <em>, <mark>, <small>, <del>, and <ins> help style and emphasize content.',
          examples: [
            '<p id="intro" class="highlight">This paragraph has an ID and class.</p>\n<p>This text has <strong>strong importance</strong> and <em>emphasis</em>.</p>\n<p>You can <mark>highlight text</mark> and make it <small>smaller</small>.</p>\n<p>This text is <del>deleted</del> and this is <ins>inserted</ins>.</p>\n<p style="color: blue; font-size: 18px;">This paragraph has inline styles.</p>'
          ],
          challenge: {
            title: 'Add Attributes and Formatting',
            description: 'Add appropriate attributes and formatting tags to enhance the HTML content.',
            starterCode: '<div>\n  <p>Welcome to our website</p>\n  <p>This is important information</p>\n  <p>This text needs emphasis</p>\n</div>',
            solution: '<div id="main-content" class="container">\n  <p class="welcome-text">Welcome to our <strong>amazing</strong> website</p>\n  <p><mark>This is important information</mark> that you should remember</p>\n  <p>This text needs <em>special emphasis</em> and attention</p>\n</div>'
          }
        }
      },
      {
        id: 'html-3',
        title: 'Lists (Ordered, Unordered)',
        description: 'Create organized content using ordered and unordered lists',
        duration: '20 min',
        difficulty: 'beginner',
        estimatedTime: 20,
        content: {
          theory: 'HTML lists help organize content in a structured way. Unordered lists (ul) create bullet points, while ordered lists (ol) create numbered items. Each list item is wrapped in <li> tags. Lists can be nested and styled with CSS.',
          examples: [
            '<!-- Unordered List -->\n<ul>\n  <li>HTML</li>\n  <li>CSS</li>\n  <li>JavaScript</li>\n</ul>\n\n<!-- Ordered List -->\n<ol>\n  <li>Learn HTML basics</li>\n  <li>Style with CSS</li>\n  <li>Add interactivity with JavaScript</li>\n</ol>\n\n<!-- Nested Lists -->\n<ul>\n  <li>Frontend\n    <ul>\n      <li>HTML</li>\n      <li>CSS</li>\n      <li>JavaScript</li>\n    </ul>\n  </li>\n  <li>Backend\n    <ol>\n      <li>Node.js</li>\n      <li>Python</li>\n    </ol>\n  </li>\n</ul>'
          ],
          challenge: {
            title: 'Create a Skills List',
            description: 'Create both ordered and unordered lists to showcase programming skills and learning steps.',
            starterCode: '<!-- Create your lists here -->\n',
            solution: '<h2>My Programming Skills</h2>\n<ul>\n  <li>HTML5</li>\n  <li>CSS3</li>\n  <li>JavaScript</li>\n  <li>React</li>\n</ul>\n\n<h2>Learning Plan</h2>\n<ol>\n  <li>Master HTML fundamentals</li>\n  <li>Learn CSS styling</li>\n  <li>Understand JavaScript basics</li>\n  <li>Build projects with React</li>\n</ol>'
          }
        }
      },
      {
        id: 'html-4',
        title: 'Links and Anchor Tags',
        description: 'Connect pages and sections using links and anchor tags',
        duration: '25 min',
        difficulty: 'beginner',
        estimatedTime: 25,
        content: {
          theory: 'Links are fundamental to the web, connecting pages and resources. The <a> tag creates hyperlinks using the href attribute. Links can point to other pages, sections within the same page, email addresses, or phone numbers. The target attribute controls how links open.',
          examples: [
            '<!-- External link -->\n<a href="https://www.example.com" target="_blank">Visit Example.com</a>\n\n<!-- Internal link -->\n<a href="about.html">About Us</a>\n\n<!-- Link to section -->\n<a href="#contact">Go to Contact Section</a>\n\n<!-- Email link -->\n<a href="mailto:hello@example.com">Send Email</a>\n\n<!-- Phone link -->\n<a href="tel:+1234567890">Call Us</a>\n\n<!-- Section with ID -->\n<section id="contact">\n  <h2>Contact Information</h2>\n  <p>Get in touch with us!</p>\n</section>'
          ],
          challenge: {
            title: 'Create a Navigation Menu',
            description: 'Build a navigation menu with different types of links.',
            starterCode: '<nav>\n  <!-- Add navigation links here -->\n</nav>\n\n<main>\n  <!-- Add sections here -->\n</main>',
            solution: '<nav>\n  <a href="#home">Home</a>\n  <a href="#about">About</a>\n  <a href="#services">Services</a>\n  <a href="#contact">Contact</a>\n  <a href="https://github.com" target="_blank">GitHub</a>\n</nav>\n\n<main>\n  <section id="home">\n    <h1>Welcome Home</h1>\n  </section>\n  <section id="about">\n    <h2>About Us</h2>\n  </section>\n  <section id="services">\n    <h2>Our Services</h2>\n  </section>\n  <section id="contact">\n    <h2>Contact</h2>\n    <p>Email: <a href="mailto:info@company.com">info@company.com</a></p>\n  </section>\n</main>'
          }
        }
      },
      {
        id: 'html-5',
        title: 'Images and Image Attributes',
        description: 'Add and optimize images with proper attributes for accessibility and performance',
        duration: '30 min',
        difficulty: 'beginner',
        estimatedTime: 30,
        content: {
          theory: 'Images enhance web content visually. The <img> tag embeds images using the src attribute. The alt attribute provides alternative text for accessibility and SEO. Other important attributes include width, height, title, and loading for performance optimization.',
          examples: [
            '<!-- Basic image -->\n<img src="logo.png" alt="Company Logo">\n\n<!-- Image with dimensions -->\n<img src="hero-image.jpg" alt="Beautiful landscape" width="800" height="400">\n\n<!-- Responsive image -->\n<img src="photo.jpg" alt="Team photo" style="max-width: 100%; height: auto;">\n\n<!-- Lazy loading -->\n<img src="large-image.jpg" alt="Large image" loading="lazy">\n\n<!-- Image with caption -->\n<figure>\n  <img src="chart.png" alt="Sales data chart">\n  <figcaption>Q4 Sales Performance</figcaption>\n</figure>'
          ],
          challenge: {
            title: 'Create an Image Gallery',
            description: 'Build a simple image gallery with proper attributes and captions.',
            starterCode: '<div class="gallery">\n  <!-- Add images here -->\n</div>',
            solution: '<div class="gallery">\n  <figure>\n    <img src="https://images.pexels.com/photos/417074/pexels-photo-417074.jpeg?w=300" alt="Mountain landscape at sunset" width="300" height="200">\n    <figcaption>Mountain Sunset</figcaption>\n  </figure>\n  \n  <figure>\n    <img src="https://images.pexels.com/photos/414612/pexels-photo-414612.jpeg?w=300" alt="Ocean waves on sandy beach" width="300" height="200">\n    <figcaption>Ocean Waves</figcaption>\n  </figure>\n  \n  <figure>\n    <img src="https://images.pexels.com/photos/147411/italy-mountains-dawn-daybreak-147411.jpeg?w=300" alt="Forest path in morning light" width="300" height="200" loading="lazy">\n    <figcaption>Forest Path</figcaption>\n  </figure>\n</div>'
          }
        }
      },
      {
        id: 'html-6',
        title: 'Tables (rows, columns, headers)',
        description: 'Structure tabular data using HTML tables with proper headers and organization',
        duration: '35 min',
        difficulty: 'intermediate',
        estimatedTime: 35,
        content: {
          theory: 'HTML tables organize data in rows and columns. The <table> element contains <thead> for headers, <tbody> for body content, and <tfoot> for footers. Use <tr> for rows, <th> for header cells, and <td> for data cells. Tables should be used for tabular data, not layout.',
          examples: [
            '<table>\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Age</th>\n      <th>City</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>John Doe</td>\n      <td>25</td>\n      <td>New York</td>\n    </tr>\n    <tr>\n      <td>Jane Smith</td>\n      <td>30</td>\n      <td>Los Angeles</td>\n    </tr>\n  </tbody>\n</table>\n\n<!-- Table with colspan and rowspan -->\n<table>\n  <tr>\n    <th colspan="2">Sales Report</th>\n  </tr>\n  <tr>\n    <td>Q1</td>\n    <td>$10,000</td>\n  </tr>\n  <tr>\n    <td>Q2</td>\n    <td>$15,000</td>\n  </tr>\n</table>'
          ],
          challenge: {
            title: 'Create a Course Schedule Table',
            description: 'Build a table showing a weekly course schedule with proper headers.',
            starterCode: '<table>\n  <!-- Add table structure here -->\n</table>',
            solution: '<table>\n  <caption>Weekly Course Schedule</caption>\n  <thead>\n    <tr>\n      <th>Time</th>\n      <th>Monday</th>\n      <th>Tuesday</th>\n      <th>Wednesday</th>\n      <th>Thursday</th>\n      <th>Friday</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>9:00 AM</td>\n      <td>HTML Basics</td>\n      <td>CSS Styling</td>\n      <td>JavaScript</td>\n      <td>React</td>\n      <td>Project Work</td>\n    </tr>\n    <tr>\n      <td>11:00 AM</td>\n      <td>Practice</td>\n      <td>Practice</td>\n      <td>Practice</td>\n      <td>Practice</td>\n      <td>Review</td>\n    </tr>\n    <tr>\n      <td>2:00 PM</td>\n      <td colspan="5">Lunch Break</td>\n    </tr>\n  </tbody>\n</table>'
          }
        }
      },
      {
        id: 'html-7',
        title: 'Forms and Input Types',
        description: 'Create interactive forms with various input types for user data collection',
        duration: '40 min',
        difficulty: 'intermediate',
        estimatedTime: 40,
        content: {
          theory: 'HTML forms collect user input through various input types. The <form> element contains form controls like <input>, <textarea>, <select>, and <button>. Different input types include text, email, password, number, date, checkbox, radio, and more. Form validation and accessibility are crucial.',
          examples: [
            '<form action="/submit" method="post">\n  <label for="name">Full Name:</label>\n  <input type="text" id="name" name="name" required>\n  \n  <label for="email">Email:</label>\n  <input type="email" id="email" name="email" required>\n  \n  <label for="age">Age:</label>\n  <input type="number" id="age" name="age" min="18" max="100">\n  \n  <label for="password">Password:</label>\n  <input type="password" id="password" name="password" required>\n  \n  <label for="bio">Bio:</label>\n  <textarea id="bio" name="bio" rows="4"></textarea>\n  \n  <label for="country">Country:</label>\n  <select id="country" name="country">\n    <option value="">Select a country</option>\n    <option value="us">United States</option>\n    <option value="ca">Canada</option>\n    <option value="uk">United Kingdom</option>\n  </select>\n  \n  <fieldset>\n    <legend>Interests</legend>\n    <input type="checkbox" id="coding" name="interests" value="coding">\n    <label for="coding">Coding</label>\n    \n    <input type="checkbox" id="design" name="interests" value="design">\n    <label for="design">Design</label>\n  </fieldset>\n  \n  <button type="submit">Submit</button>\n</form>'
          ],
          challenge: {
            title: 'Build a Registration Form',
            description: 'Create a comprehensive registration form with validation.',
            starterCode: '<form>\n  <!-- Add form fields here -->\n</form>',
            solution: '<form action="/register" method="post">\n  <h2>Create Account</h2>\n  \n  <label for="username">Username:</label>\n  <input type="text" id="username" name="username" required minlength="3">\n  \n  <label for="email">Email Address:</label>\n  <input type="email" id="email" name="email" required>\n  \n  <label for="password">Password:</label>\n  <input type="password" id="password" name="password" required minlength="8">\n  \n  <label for="birthdate">Birth Date:</label>\n  <input type="date" id="birthdate" name="birthdate">\n  \n  <fieldset>\n    <legend>Account Type</legend>\n    <input type="radio" id="student" name="account_type" value="student" checked>\n    <label for="student">Student</label>\n    \n    <input type="radio" id="teacher" name="account_type" value="teacher">\n    <label for="teacher">Teacher</label>\n  </fieldset>\n  \n  <input type="checkbox" id="terms" name="terms" required>\n  <label for="terms">I agree to the terms and conditions</label>\n  \n  <button type="submit">Create Account</button>\n</form>'
          }
        }
      },
      {
        id: 'html-8',
        title: 'Semantic HTML',
        description: 'Use semantic HTML elements to create meaningful and accessible web structure',
        duration: '30 min',
        difficulty: 'intermediate',
        estimatedTime: 30,
        content: {
          theory: 'Semantic HTML uses elements that clearly describe their meaning to both browsers and developers. Elements like <header>, <nav>, <main>, <article>, <section>, <aside>, and <footer> provide structure and meaning. This improves accessibility, SEO, and code maintainability.',
          examples: [
            '<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <title>Semantic HTML Example</title>\n</head>\n<body>\n  <header>\n    <h1>My Blog</h1>\n    <nav>\n      <ul>\n        <li><a href="#home">Home</a></li>\n        <li><a href="#about">About</a></li>\n        <li><a href="#contact">Contact</a></li>\n      </ul>\n    </nav>\n  </header>\n  \n  <main>\n    <article>\n      <header>\n        <h2>Article Title</h2>\n        <time datetime="2024-01-15">January 15, 2024</time>\n      </header>\n      <p>Article content goes here...</p>\n      <footer>\n        <p>By <address>John Doe</address></p>\n      </footer>\n    </article>\n    \n    <aside>\n      <h3>Related Links</h3>\n      <ul>\n        <li><a href="#">Link 1</a></li>\n        <li><a href="#">Link 2</a></li>\n      </ul>\n    </aside>\n  </main>\n  \n  <footer>\n    <p>&copy; 2024 My Blog. All rights reserved.</p>\n  </footer>\n</body>\n</html>'
          ],
          challenge: {
            title: 'Create a Semantic Blog Layout',
            description: 'Build a blog page using proper semantic HTML elements.',
            starterCode: '<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <title>My Blog</title>\n</head>\n<body>\n  <!-- Add semantic structure here -->\n</body>\n</html>',
            solution: '<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <title>Tech Blog</title>\n</head>\n<body>\n  <header>\n    <h1>Tech Insights Blog</h1>\n    <nav>\n      <ul>\n        <li><a href="#home">Home</a></li>\n        <li><a href="#tutorials">Tutorials</a></li>\n        <li><a href="#reviews">Reviews</a></li>\n      </ul>\n    </nav>\n  </header>\n  \n  <main>\n    <section id="featured">\n      <h2>Featured Articles</h2>\n      \n      <article>\n        <header>\n          <h3>Getting Started with React</h3>\n          <time datetime="2024-01-20">January 20, 2024</time>\n        </header>\n        <p>Learn the basics of React development...</p>\n        <footer>\n          <p>By <address>Sarah Johnson</address></p>\n        </footer>\n      </article>\n    </section>\n    \n    <aside>\n      <h3>Popular Tags</h3>\n      <ul>\n        <li><a href="#react">React</a></li>\n        <li><a href="#javascript">JavaScript</a></li>\n        <li><a href="#css">CSS</a></li>\n      </ul>\n    </aside>\n  </main>\n  \n  <footer>\n    <p>&copy; 2024 Tech Insights. All rights reserved.</p>\n  </footer>\n</body>\n</html>'
          }
        }
      },
      {
        id: 'html-9',
        title: 'HTML5 Audio and Video',
        description: 'Embed multimedia content using HTML5 audio and video elements',
        duration: '35 min',
        difficulty: 'intermediate',
        estimatedTime: 35,
        content: {
          theory: 'HTML5 introduced native <audio> and <video> elements for multimedia content. These elements support multiple formats and provide built-in controls. Attributes like controls, autoplay, loop, and muted control playback behavior. Always provide fallback content for older browsers.',
          examples: [
            '<!-- Basic video -->\n<video controls width="640" height="360">\n  <source src="movie.mp4" type="video/mp4">\n  <source src="movie.webm" type="video/webm">\n  <p>Your browser doesn\'t support video. <a href="movie.mp4">Download the video</a>.</p>\n</video>\n\n<!-- Video with poster -->\n<video controls poster="thumbnail.jpg" width="640" height="360">\n  <source src="presentation.mp4" type="video/mp4">\n</video>\n\n<!-- Audio element -->\n<audio controls>\n  <source src="podcast.mp3" type="audio/mpeg">\n  <source src="podcast.ogg" type="audio/ogg">\n  <p>Your browser doesn\'t support audio. <a href="podcast.mp3">Download the audio</a>.</p>\n</audio>\n\n<!-- Audio with loop -->\n<audio controls loop>\n  <source src="background-music.mp3" type="audio/mpeg">\n</audio>'
          ],
          challenge: {
            title: 'Create a Media Gallery',
            description: 'Build a multimedia gallery with both audio and video content.',
            starterCode: '<section class="media-gallery">\n  <h2>Media Gallery</h2>\n  <!-- Add multimedia content here -->\n</section>',
            solution: '<section class="media-gallery">\n  <h2>Media Gallery</h2>\n  \n  <article>\n    <h3>Tutorial Video</h3>\n    <video controls width="560" height="315" poster="https://images.pexels.com/photos/1181263/pexels-photo-1181263.jpeg?w=560">\n      <source src="tutorial.mp4" type="video/mp4">\n      <source src="tutorial.webm" type="video/webm">\n      <p>Your browser doesn\'t support video. <a href="tutorial.mp4">Download the tutorial</a>.</p>\n    </video>\n    <p>Learn web development basics in this comprehensive tutorial.</p>\n  </article>\n  \n  <article>\n    <h3>Podcast Episode</h3>\n    <audio controls>\n      <source src="episode-1.mp3" type="audio/mpeg">\n      <source src="episode-1.ogg" type="audio/ogg">\n      <p>Your browser doesn\'t support audio. <a href="episode-1.mp3">Download the podcast</a>.</p>\n    </audio>\n    <p>Episode 1: Introduction to Modern Web Development</p>\n  </article>\n  \n  <article>\n    <h3>Demo Video</h3>\n    <video controls width="560" height="315" muted>\n      <source src="demo.mp4" type="video/mp4">\n      <p>Browser doesn\'t support video.</p>\n    </video>\n    <p>Live coding demonstration of building a responsive website.</p>\n  </article>\n</section>'
          }
        }
      },
      {
        id: 'html-10',
        title: 'HTML Meta Tags and SEO Basics',
        description: 'Optimize your web pages for search engines using meta tags and SEO best practices',
        duration: '30 min',
        difficulty: 'intermediate',
        estimatedTime: 30,
        content: {
          theory: 'Meta tags provide metadata about HTML documents. They\'re crucial for SEO, social media sharing, and browser behavior. Important meta tags include description, keywords, viewport, charset, and Open Graph tags for social media. Proper meta tags improve search engine rankings and user experience.',
          examples: [
            '<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <meta name="viewport" content="width=device-width, initial-scale=1.0">\n  <meta name="description" content="Learn web development with our comprehensive HTML, CSS, and JavaScript tutorials.">\n  <meta name="keywords" content="HTML, CSS, JavaScript, web development, tutorials">\n  <meta name="author" content="CodeLearn Academy">\n  \n  <!-- Open Graph for social media -->\n  <meta property="og:title" content="Web Development Tutorials">\n  <meta property="og:description" content="Master web development with step-by-step tutorials">\n  <meta property="og:image" content="https://example.com/preview-image.jpg">\n  <meta property="og:url" content="https://example.com">\n  <meta property="og:type" content="website">\n  \n  <!-- Twitter Card -->\n  <meta name="twitter:card" content="summary_large_image">\n  <meta name="twitter:title" content="Web Development Tutorials">\n  <meta name="twitter:description" content="Master web development with step-by-step tutorials">\n  <meta name="twitter:image" content="https://example.com/preview-image.jpg">\n  \n  <title>Web Development Tutorials | CodeLearn Academy</title>\n  <link rel="canonical" href="https://example.com/tutorials">\n</head>\n<body>\n  <h1>Welcome to Web Development Tutorials</h1>\n</body>\n</html>'
          ],
          challenge: {
            title: 'Optimize a Page for SEO',
            description: 'Add comprehensive meta tags to optimize a web page for search engines and social media.',
            starterCode: '<!DOCTYPE html>\n<html>\n<head>\n  <title>My Portfolio</title>\n  <!-- Add meta tags here -->\n</head>\n<body>\n  <h1>John Doe - Web Developer</h1>\n  <p>Welcome to my portfolio website.</p>\n</body>\n</html>',
            solution: '<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <meta name="viewport" content="width=device-width, initial-scale=1.0">\n  <meta name="description" content="John Doe - Professional web developer specializing in React, JavaScript, and modern web technologies. View my portfolio and projects.">\n  <meta name="keywords" content="web developer, React, JavaScript, HTML, CSS, portfolio, frontend developer">\n  <meta name="author" content="John Doe">\n  <meta name="robots" content="index, follow">\n  \n  <!-- Open Graph -->\n  <meta property="og:title" content="John Doe - Web Developer Portfolio">\n  <meta property="og:description" content="Professional web developer specializing in modern web technologies">\n  <meta property="og:image" content="https://johndoe.dev/portfolio-preview.jpg">\n  <meta property="og:url" content="https://johndoe.dev">\n  <meta property="og:type" content="website">\n  <meta property="og:site_name" content="John Doe Portfolio">\n  \n  <!-- Twitter Card -->\n  <meta name="twitter:card" content="summary_large_image">\n  <meta name="twitter:creator" content="@johndoe">\n  <meta name="twitter:title" content="John Doe - Web Developer">\n  <meta name="twitter:description" content="Professional web developer portfolio">\n  <meta name="twitter:image" content="https://johndoe.dev/portfolio-preview.jpg">\n  \n  <title>John Doe - Professional Web Developer | Portfolio</title>\n  <link rel="canonical" href="https://johndoe.dev">\n</head>\n<body>\n  <h1>John Doe - Web Developer</h1>\n  <p>Welcome to my portfolio website showcasing modern web development projects.</p>\n</body>\n</html>'
          }
        }
      }
    ]
  },
  {
    id: 'css',
    title: 'CSS Styling',
    description: 'Style your web pages with CSS',
    icon: 'üé®',
    color: 'from-blue-400 to-purple-500',
    totalLessons: 10,
    estimatedHours: 6,
    lessons: [
      {
        id: 'css-1',
        title: 'Introduction & Selectors',
        description: 'Learn CSS basics and how to select elements for styling',
        duration: '35 min',
        difficulty: 'beginner',
        estimatedTime: 35,
        content: {
          theory: 'CSS (Cascading Style Sheets) controls the presentation of HTML elements. CSS selectors are patterns used to select HTML elements you want to style. There are several types: element selectors (h1), class selectors (.class), ID selectors (#id), attribute selectors, pseudo-class selectors, and combinators.',
          examples: [
            '/* Element selector */\nh1 {\n  color: blue;\n  font-size: 2em;\n}\n\n/* Class selector */\n.highlight {\n  background-color: yellow;\n  padding: 10px;\n}\n\n/* ID selector */\n#header {\n  background-color: #333;\n  color: white;\n}\n\n/* Attribute selector */\ninput[type="email"] {\n  border: 2px solid blue;\n}\n\n/* Pseudo-class selector */\na:hover {\n  color: red;\n  text-decoration: underline;\n}\n\n/* Descendant combinator */\n.container p {\n  line-height: 1.6;\n}\n\n/* Child combinator */\nul > li {\n  list-style-type: square;\n}'
          ],
          challenge: {
            title: 'Style with Different Selectors',
            description: 'Use various CSS selectors to style a webpage with different elements.',
            starterCode: '<style>\n/* Add your CSS here */\n</style>\n\n<div id="main" class="container">\n  <h1>Welcome</h1>\n  <p class="intro">This is an introduction paragraph.</p>\n  <ul>\n    <li>Item 1</li>\n    <li class="special">Item 2</li>\n    <li>Item 3</li>\n  </ul>\n  <a href="#" class="button">Click me</a>\n</div>',
            solution: '<style>\n/* Element selector */\nh1 {\n  color: #2c3e50;\n  font-size: 2.5em;\n  text-align: center;\n}\n\n/* ID selector */\n#main {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\n/* Class selector */\n.container {\n  background-color: #f8f9fa;\n  border-radius: 8px;\n}\n\n.intro {\n  font-size: 1.2em;\n  color: #666;\n  font-style: italic;\n}\n\n.special {\n  background-color: #e74c3c;\n  color: white;\n  padding: 5px;\n  border-radius: 4px;\n}\n\n/* Descendant selector */\n.container ul {\n  background-color: white;\n  padding: 15px;\n  border-radius: 5px;\n}\n\n/* Pseudo-class selector */\n.button:hover {\n  background-color: #3498db;\n  color: white;\n  transform: scale(1.05);\n}\n\na {\n  display: inline-block;\n  padding: 10px 20px;\n  background-color: #2ecc71;\n  color: white;\n  text-decoration: none;\n  border-radius: 5px;\n  transition: all 0.3s ease;\n}\n</style>\n\n<div id="main" class="container">\n  <h1>Welcome</h1>\n  <p class="intro">This is an introduction paragraph.</p>\n  <ul>\n    <li>Item 1</li>\n    <li class="special">Item 2</li>\n    <li>Item 3</li>\n  </ul>\n  <a href="#" class="button">Click me</a>\n</div>'
          }
        }
      },
      {
        id: 'css-2',
        title: 'Colors, Units, and Typography',
        description: 'Master CSS colors, measurement units, and typography properties',
        duration: '40 min',
        difficulty: 'beginner',
        estimatedTime: 40,
        content: {
          theory: 'CSS offers various ways to specify colors (hex, rgb, hsl, named colors) and units (px, em, rem, %, vw, vh). Typography properties control text appearance including font-family, font-size, font-weight, line-height, letter-spacing, and text-align. Understanding these fundamentals is crucial for effective styling.',
          examples: [
            '/* Color values */\n.text-colors {\n  color: #3498db;           /* Hex */\n  background-color: rgb(52, 152, 219);  /* RGB */\n  border-color: hsl(204, 70%, 53%);     /* HSL */\n}\n\n/* Units */\n.units-example {\n  width: 300px;        /* Pixels */\n  padding: 1em;        /* Em (relative to font-size) */\n  margin: 2rem;        /* Rem (relative to root font-size) */\n  height: 50vh;        /* Viewport height */\n  max-width: 80%;      /* Percentage */\n}\n\n/* Typography */\n.typography {\n  font-family: "Helvetica Neue", Arial, sans-serif;\n  font-size: 1.2rem;\n  font-weight: 600;\n  line-height: 1.6;\n  letter-spacing: 0.5px;\n  text-align: center;\n  text-transform: uppercase;\n  text-decoration: underline;\n}\n\n/* Google Fonts */\n@import url("https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700&display=swap");\n\n.custom-font {\n  font-family: "Roboto", sans-serif;\n  font-weight: 300;\n}'
          ],
          challenge: {
            title: 'Create a Typography System',
            description: 'Design a comprehensive typography system with colors and proper spacing.',
            starterCode: '<style>\n/* Add your typography styles here */\n</style>\n\n<article>\n  <h1>The Future of Web Development</h1>\n  <h2>Emerging Technologies</h2>\n  <p class="lead">Web development continues to evolve rapidly with new technologies and frameworks.</p>\n  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>\n  <blockquote>Innovation distinguishes between a leader and a follower.</blockquote>\n  <h3>Key Technologies</h3>\n  <p>Modern web development embraces cutting-edge tools and methodologies.</p>\n</article>',
            solution: '<style>\n@import url("https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600;700&display=swap");\n\n/* Base typography */\nbody {\n  font-family: "Inter", -apple-system, BlinkMacSystemFont, sans-serif;\n  line-height: 1.6;\n  color: #2c3e50;\n  background-color: #f8f9fa;\n}\n\narticle {\n  max-width: 800px;\n  margin: 2rem auto;\n  padding: 2rem;\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n\n/* Headings */\nh1 {\n  font-size: 2.5rem;\n  font-weight: 700;\n  color: #1a202c;\n  margin-bottom: 1rem;\n  line-height: 1.2;\n  letter-spacing: -0.025em;\n}\n\nh2 {\n  font-size: 2rem;\n  font-weight: 600;\n  color: #2d3748;\n  margin: 2rem 0 1rem 0;\n  border-bottom: 2px solid #e2e8f0;\n  padding-bottom: 0.5rem;\n}\n\nh3 {\n  font-size: 1.5rem;\n  font-weight: 600;\n  color: #4a5568;\n  margin: 1.5rem 0 0.75rem 0;\n}\n\n/* Paragraphs */\np {\n  margin-bottom: 1.25rem;\n  font-size: 1.1rem;\n  color: #4a5568;\n}\n\n.lead {\n  font-size: 1.3rem;\n  font-weight: 400;\n  color: #2d3748;\n  margin-bottom: 1.5rem;\n  line-height: 1.7;\n}\n\n/* Blockquote */\nblockquote {\n  border-left: 4px solid #3182ce;\n  padding-left: 1.5rem;\n  margin: 2rem 0;\n  font-style: italic;\n  font-size: 1.2rem;\n  color: #2d3748;\n  background-color: #ebf8ff;\n  padding: 1rem 1.5rem;\n  border-radius: 0 4px 4px 0;\n}\n</style>\n\n<article>\n  <h1>The Future of Web Development</h1>\n  <h2>Emerging Technologies</h2>\n  <p class="lead">Web development continues to evolve rapidly with new technologies and frameworks.</p>\n  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>\n  <blockquote>Innovation distinguishes between a leader and a follower.</blockquote>\n  <h3>Key Technologies</h3>\n  <p>Modern web development embraces cutting-edge tools and methodologies.</p>\n</article>'
          }
        }
      },
      {
        id: 'css-3',
        title: 'Box Model',
        description: 'Understand the CSS box model and how elements are sized and spaced',
        duration: '35 min',
        difficulty: 'beginner',
        estimatedTime: 35,
        content: {
          theory: 'The CSS box model describes how elements are structured with content, padding, border, and margin. Each element is a rectangular box with these layers. Understanding box-sizing (content-box vs border-box) is crucial for predictable layouts. Margin collapse and padding vs margin differences are important concepts.',
          examples: [
            '/* Box model demonstration */\n.box-example {\n  width: 300px;\n  height: 200px;\n  padding: 20px;           /* Space inside the element */\n  border: 5px solid #333;  /* Border around the element */\n  margin: 30px;            /* Space outside the element */\n  background-color: #f0f0f0;\n}\n\n/* Border-box sizing */\n.border-box {\n  box-sizing: border-box;  /* Width includes padding and border */\n  width: 300px;\n  padding: 20px;\n  border: 5px solid #333;\n}\n\n/* Content-box sizing (default) */\n.content-box {\n  box-sizing: content-box; /* Width is just the content */\n  width: 300px;\n  padding: 20px;\n  border: 5px solid #333;\n}\n\n/* Different border styles */\n.borders {\n  border-top: 2px solid red;\n  border-right: 4px dashed blue;\n  border-bottom: 3px dotted green;\n  border-left: 5px double orange;\n  border-radius: 10px;     /* Rounded corners */\n}\n\n/* Margin and padding shorthand */\n.spacing {\n  margin: 10px 20px 15px 25px;    /* top right bottom left */\n  padding: 10px 20px;             /* top/bottom left/right */\n}'
          ],
          challenge: {
            title: 'Create Card Components',
            description: 'Build card components demonstrating proper use of the box model.',
            starterCode: '<style>\n/* Add your box model styles here */\n</style>\n\n<div class="card-container">\n  <div class="card">\n    <h3>Card Title</h3>\n    <p>This is a card with proper spacing and borders.</p>\n    <button>Learn More</button>\n  </div>\n  \n  <div class="card featured">\n    <h3>Featured Card</h3>\n    <p>This card has different styling to make it stand out.</p>\n    <button>Get Started</button>\n  </div>\n</div>',
            solution: '<style>\n/* Universal box-sizing */\n* {\n  box-sizing: border-box;\n}\n\n.card-container {\n  display: flex;\n  gap: 2rem;\n  padding: 2rem;\n  background-color: #f8f9fa;\n  justify-content: center;\n}\n\n.card {\n  width: 300px;\n  background-color: white;\n  border: 1px solid #e1e5e9;\n  border-radius: 12px;\n  padding: 1.5rem;\n  margin: 1rem;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.card:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);\n}\n\n.card h3 {\n  margin: 0 0 1rem 0;\n  color: #2c3e50;\n  font-size: 1.25rem;\n  font-weight: 600;\n}\n\n.card p {\n  margin: 0 0 1.5rem 0;\n  color: #6c757d;\n  line-height: 1.6;\n}\n\n.card button {\n  background-color: #007bff;\n  color: white;\n  border: none;\n  padding: 0.75rem 1.5rem;\n  border-radius: 6px;\n  cursor: pointer;\n  font-weight: 500;\n  transition: background-color 0.2s ease;\n}\n\n.card button:hover {\n  background-color: #0056b3;\n}\n\n/* Featured card styling */\n.card.featured {\n  border: 2px solid #28a745;\n  background: linear-gradient(135deg, #f8fff9 0%, #e8f5e8 100%);\n}\n\n.card.featured h3 {\n  color: #155724;\n}\n\n.card.featured button {\n  background-color: #28a745;\n}\n\n.card.featured button:hover {\n  background-color: #1e7e34;\n}\n</style>\n\n<div class="card-container">\n  <div class="card">\n    <h3>Card Title</h3>\n    <p>This is a card with proper spacing and borders.</p>\n    <button>Learn More</button>\n  </div>\n  \n  <div class="card featured">\n    <h3>Featured Card</h3>\n    <p>This card has different styling to make it stand out.</p>\n    <button>Get Started</button>\n  </div>\n</div>'
          }
        }
      },
      {
        id: 'css-4',
        title: 'Display: Block, Inline, None',
        description: 'Learn how different display values affect element behavior and layout',
        duration: '30 min',
        difficulty: 'beginner',
        estimatedTime: 30,
        content: {
          theory: 'The display property controls how elements are rendered. Block elements take full width and start on new lines (div, p, h1). Inline elements flow with text and only take necessary width (span, a, strong). Inline-block combines both behaviors. Display: none removes elements completely, while visibility: hidden keeps space.',
          examples: [
            '/* Block elements */\n.block {\n  display: block;\n  width: 100%;\n  background-color: lightblue;\n  padding: 10px;\n  margin: 5px 0;\n}\n\n/* Inline elements */\n.inline {\n  display: inline;\n  background-color: lightgreen;\n  padding: 5px;\n  margin: 5px; /* Vertical margin ignored */\n}\n\n/* Inline-block elements */\n.inline-block {\n  display: inline-block;\n  width: 150px;\n  height: 100px;\n  background-color: lightcoral;\n  padding: 10px;\n  margin: 10px;\n  vertical-align: top;\n}\n\n/* Hidden elements */\n.hidden {\n  display: none; /* Completely removed from layout */\n}\n\n.invisible {\n  visibility: hidden; /* Hidden but space preserved */\n}\n\n/* Converting elements */\nspan.block-span {\n  display: block;\n  background-color: yellow;\n  padding: 10px;\n}\n\ndiv.inline-div {\n  display: inline;\n  background-color: pink;\n  padding: 5px;\n}'
          ],
          challenge: {
            title: 'Create a Navigation Bar',
            description: 'Build a horizontal navigation bar using different display properties.',
            starterCode: '<style>\n/* Add your display styles here */\n</style>\n\n<nav class="navbar">\n  <div class="logo">MyBrand</div>\n  <ul class="nav-menu">\n    <li><a href="#home">Home</a></li>\n    <li><a href="#about">About</a></li>\n    <li><a href="#services">Services</a></li>\n    <li><a href="#contact">Contact</a></li>\n  </ul>\n  <div class="nav-toggle">‚ò∞</div>\n</nav>\n\n<main>\n  <h1>Welcome to Our Website</h1>\n  <p>This content comes after the navigation.</p>\n</main>',
            solution: '<style>\n/* Reset default styles */\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: Arial, sans-serif;\n}\n\n/* Navigation bar */\n.navbar {\n  background-color: #333;\n  padding: 1rem 2rem;\n  display: block;\n}\n\n.logo {\n  display: inline-block;\n  color: white;\n  font-size: 1.5rem;\n  font-weight: bold;\n  vertical-align: middle;\n}\n\n.nav-menu {\n  display: inline-block;\n  list-style: none;\n  margin-left: 2rem;\n  vertical-align: middle;\n}\n\n.nav-menu li {\n  display: inline-block;\n  margin-right: 2rem;\n}\n\n.nav-menu a {\n  color: white;\n  text-decoration: none;\n  padding: 0.5rem 1rem;\n  display: inline-block;\n  border-radius: 4px;\n  transition: background-color 0.3s ease;\n}\n\n.nav-menu a:hover {\n  background-color: #555;\n}\n\n.nav-toggle {\n  display: none; /* Hidden on desktop */\n  color: white;\n  font-size: 1.5rem;\n  float: right;\n  cursor: pointer;\n}\n\n/* Main content */\nmain {\n  padding: 2rem;\n}\n\nmain h1 {\n  display: block;\n  color: #333;\n  margin-bottom: 1rem;\n}\n\nmain p {\n  display: block;\n  color: #666;\n  line-height: 1.6;\n}\n\n/* Responsive behavior */\n@media (max-width: 768px) {\n  .nav-menu {\n    display: none; /* Hide menu on mobile */\n  }\n  \n  .nav-toggle {\n    display: inline-block; /* Show toggle on mobile */\n  }\n}\n</style>\n\n<nav class="navbar">\n  <div class="logo">MyBrand</div>\n  <ul class="nav-menu">\n    <li><a href="#home">Home</a></li>\n    <li><a href="#about">About</a></li>\n    <li><a href="#services">Services</a></li>\n    <li><a href="#contact">Contact</a></li>\n  </ul>\n  <div class="nav-toggle">‚ò∞</div>\n</nav>\n\n<main>\n  <h1>Welcome to Our Website</h1>\n  <p>This content comes after the navigation.</p>\n</main>'
          }
        }
      },
      {
        id: 'css-5',
        title: 'Positioning (static, relative, absolute, fixed)',
        description: 'Master CSS positioning to precisely control element placement',
        duration: '45 min',
        difficulty: 'intermediate',
        estimatedTime: 45,
        content: {
          theory: 'CSS positioning controls where elements appear on the page. Static is the default (normal flow). Relative positions relative to normal position. Absolute positions relative to nearest positioned ancestor. Fixed positions relative to viewport. Sticky combines relative and fixed behavior. Z-index controls stacking order.',
          examples: [
            '/* Static positioning (default) */\n.static {\n  position: static;\n  /* top, right, bottom, left have no effect */\n}\n\n/* Relative positioning */\n.relative {\n  position: relative;\n  top: 20px;    /* Move 20px down from normal position */\n  left: 30px;   /* Move 30px right from normal position */\n  background-color: lightblue;\n}\n\n/* Absolute positioning */\n.container {\n  position: relative; /* Creates positioning context */\n  width: 400px;\n  height: 300px;\n  background-color: lightgray;\n}\n\n.absolute {\n  position: absolute;\n  top: 50px;    /* 50px from top of container */\n  right: 20px;  /* 20px from right of container */\n  width: 100px;\n  height: 100px;\n  background-color: red;\n}\n\n/* Fixed positioning */\n.fixed-header {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  background-color: navy;\n  color: white;\n  padding: 1rem;\n  z-index: 1000;\n}\n\n/* Sticky positioning */\n.sticky {\n  position: sticky;\n  top: 0;\n  background-color: yellow;\n  padding: 1rem;\n}\n\n/* Z-index stacking */\n.layer-1 {\n  position: relative;\n  z-index: 1;\n}\n\n.layer-2 {\n  position: relative;\n  z-index: 2;\n}'
          ],
          challenge: {
            title: 'Create a Layout with Different Positioning',
            description: 'Build a webpage layout using various positioning techniques.',
            starterCode: '<style>\n/* Add your positioning styles here */\n</style>\n\n<header class="fixed-header">\n  <h1>Fixed Header</h1>\n</header>\n\n<nav class="sticky-nav">\n  <ul>\n    <li><a href="#section1">Section 1</a></li>\n    <li><a href="#section2">Section 2</a></li>\n    <li><a href="#section3">Section 3</a></li>\n  </ul>\n</nav>\n\n<main>\n  <section id="section1" class="hero">\n    <h2>Hero Section</h2>\n    <div class="badge">New!</div>\n    <p>This is a hero section with an absolutely positioned badge.</p>\n  </section>\n  \n  <section id="section2">\n    <h2>Content Section</h2>\n    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n  </section>\n  \n  <section id="section3">\n    <h2>More Content</h2>\n    <p>More content to demonstrate scrolling behavior.</p>\n  </section>\n</main>\n\n<div class="floating-button">üí¨</div>',
            solution: '<style>\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: Arial, sans-serif;\n  padding-top: 80px; /* Account for fixed header */\n}\n\n/* Fixed header */\n.fixed-header {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  background-color: #2c3e50;\n  color: white;\n  padding: 1rem 2rem;\n  z-index: 1000;\n  box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n}\n\n.fixed-header h1 {\n  font-size: 1.5rem;\n}\n\n/* Sticky navigation */\n.sticky-nav {\n  position: sticky;\n  top: 80px; /* Stick below fixed header */\n  background-color: #34495e;\n  padding: 1rem 2rem;\n  z-index: 100;\n}\n\n.sticky-nav ul {\n  list-style: none;\n  display: flex;\n  gap: 2rem;\n}\n\n.sticky-nav a {\n  color: white;\n  text-decoration: none;\n  padding: 0.5rem 1rem;\n  border-radius: 4px;\n  transition: background-color 0.3s;\n}\n\n.sticky-nav a:hover {\n  background-color: #2c3e50;\n}\n\n/* Hero section with relative positioning */\n.hero {\n  position: relative;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: white;\n  padding: 4rem 2rem;\n  text-align: center;\n  min-height: 400px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n\n.hero h2 {\n  font-size: 3rem;\n  margin-bottom: 1rem;\n}\n\n/* Absolutely positioned badge */\n.badge {\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  background-color: #e74c3c;\n  color: white;\n  padding: 0.5rem 1rem;\n  border-radius: 20px;\n  font-weight: bold;\n  font-size: 0.9rem;\n  animation: pulse 2s infinite;\n}\n\n@keyframes pulse {\n  0% { transform: scale(1); }\n  50% { transform: scale(1.1); }\n  100% { transform: scale(1); }\n}\n\n/* Content sections */\nsection {\n  padding: 3rem 2rem;\n  max-width: 800px;\n  margin: 0 auto;\n}\n\nsection h2 {\n  color: #2c3e50;\n  margin-bottom: 1rem;\n  font-size: 2rem;\n}\n\nsection p {\n  color: #666;\n  line-height: 1.6;\n  font-size: 1.1rem;\n}\n\n/* Fixed floating button */\n.floating-button {\n  position: fixed;\n  bottom: 30px;\n  right: 30px;\n  width: 60px;\n  height: 60px;\n  background-color: #3498db;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 1.5rem;\n  cursor: pointer;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n  z-index: 999;\n  transition: transform 0.3s ease;\n}\n\n.floating-button:hover {\n  transform: scale(1.1);\n}\n</style>\n\n<header class="fixed-header">\n  <h1>Fixed Header</h1>\n</header>\n\n<nav class="sticky-nav">\n  <ul>\n    <li><a href="#section1">Section 1</a></li>\n    <li><a href="#section2">Section 2</a></li>\n    <li><a href="#section3">Section 3</a></li>\n  </ul>\n</nav>\n\n<main>\n  <section id="section1" class="hero">\n    <h2>Hero Section</h2>\n    <div class="badge">New!</div>\n    <p>This is a hero section with an absolutely positioned badge.</p>\n  </section>\n  \n  <section id="section2">\n    <h2>Content Section</h2>\n    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris.</p>\n  </section>\n  \n  <section id="section3">\n    <h2>More Content</h2>\n    <p>More content to demonstrate scrolling behavior. The sticky navigation will follow as you scroll, while the header remains fixed at the top.</p>\n  </section>\n</main>\n\n<div class="floating-button">üí¨</div>'
          }
        }
      },
      {
        id: 'css-6',
        title: 'Flexbox Basics',
        description: 'Master flexible box layout for responsive and dynamic designs',
        duration: '50 min',
        difficulty: 'intermediate',
        estimatedTime: 50,
        content: {
          theory: 'Flexbox is a powerful layout method that allows you to arrange elements in a flexible way. It provides an efficient way to distribute space and align items in a container, even when their size is unknown or dynamic. Key concepts include flex container, flex items, main axis, cross axis, and various flex properties.',
          examples: [
            '/* Basic flex container */\n.flex-container {\n  display: flex;\n  background-color: lightgray;\n  padding: 10px;\n}\n\n.flex-item {\n  background-color: lightblue;\n  margin: 5px;\n  padding: 20px;\n  text-align: center;\n}\n\n/* Flex direction */\n.row { flex-direction: row; }        /* Default */\n.column { flex-direction: column; }\n.row-reverse { flex-direction: row-reverse; }\n.column-reverse { flex-direction: column-reverse; }\n\n/* Justify content (main axis) */\n.justify-start { justify-content: flex-start; }    /* Default */\n.justify-center { justify-content: center; }\n.justify-end { justify-content: flex-end; }\n.justify-between { justify-content: space-between; }\n.justify-around { justify-content: space-around; }\n.justify-evenly { justify-content: space-evenly; }\n\n/* Align items (cross axis) */\n.align-start { align-items: flex-start; }\n.align-center { align-items: center; }\n.align-end { align-items: flex-end; }\n.align-stretch { align-items: stretch; }    /* Default */\n.align-baseline { align-items: baseline; }\n\n/* Flex item properties */\n.flex-grow-1 { flex-grow: 1; }      /* Grow to fill space */\n.flex-shrink-0 { flex-shrink: 0; }  /* Don\'t shrink */\n.flex-basis-200 { flex-basis: 200px; } /* Initial size */\n.flex-1 { flex: 1; }                /* Shorthand: grow shrink basis */\n\n/* Wrap */\n.flex-wrap { flex-wrap: wrap; }\n.flex-nowrap { flex-wrap: nowrap; }  /* Default */'
          ],
          challenge: {
            title: 'Build a Responsive Card Layout',
            description: 'Create a responsive card layout using flexbox properties.',
            starterCode: '<style>\n/* Add your flexbox styles here */\n</style>\n\n<div class="container">\n  <header class="header">\n    <h1>Flexbox Layout</h1>\n    <nav>\n      <a href="#">Home</a>\n      <a href="#">About</a>\n      <a href="#">Contact</a>\n    </nav>\n  </header>\n  \n  <main class="main-content">\n    <section class="cards">\n      <div class="card">\n        <h3>Card 1</h3>\n        <p>This is the first card with some content.</p>\n        <button>Learn More</button>\n      </div>\n      <div class="card">\n        <h3>Card 2</h3>\n        <p>This is the second card with different content length to test flex behavior.</p>\n        <button>Learn More</button>\n      </div>\n      <div class="card">\n        <h3>Card 3</h3>\n        <p>Third card.</p>\n        <button>Learn More</button>\n      </div>\n    </section>\n    \n    <aside class="sidebar">\n      <h3>Sidebar</h3>\n      <p>This is a sidebar that should be flexible.</p>\n    </aside>\n  </main>\n  \n  <footer class="footer">\n    <p>&copy; 2024 Flexbox Demo</p>\n  </footer>\n</div>',
            solution: '<style>\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: Arial, sans-serif;\n  line-height: 1.6;\n}\n\n.container {\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n}\n\n/* Header with flex navigation */\n.header {\n  background-color: #2c3e50;\n  color: white;\n  padding: 1rem 2rem;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  flex-wrap: wrap;\n}\n\n.header h1 {\n  font-size: 1.5rem;\n}\n\n.header nav {\n  display: flex;\n  gap: 1.5rem;\n}\n\n.header nav a {\n  color: white;\n  text-decoration: none;\n  padding: 0.5rem 1rem;\n  border-radius: 4px;\n  transition: background-color 0.3s;\n}\n\n.header nav a:hover {\n  background-color: #34495e;\n}\n\n/* Main content area */\n.main-content {\n  flex: 1;\n  display: flex;\n  gap: 2rem;\n  padding: 2rem;\n  background-color: #f8f9fa;\n}\n\n/* Cards section */\n.cards {\n  flex: 3;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 1.5rem;\n}\n\n.card {\n  flex: 1;\n  min-width: 250px;\n  background-color: white;\n  border-radius: 8px;\n  padding: 1.5rem;\n  box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n  display: flex;\n  flex-direction: column;\n  transition: transform 0.3s ease;\n}\n\n.card:hover {\n  transform: translateY(-5px);\n}\n\n.card h3 {\n  color: #2c3e50;\n  margin-bottom: 1rem;\n}\n\n.card p {\n  color: #666;\n  margin-bottom: 1.5rem;\n  flex-grow: 1; /* Push button to bottom */\n}\n\n.card button {\n  background-color: #3498db;\n  color: white;\n  border: none;\n  padding: 0.75rem 1.5rem;\n  border-radius: 4px;\n  cursor: pointer;\n  font-weight: 500;\n  align-self: flex-start;\n  transition: background-color 0.3s;\n}\n\n.card button:hover {\n  background-color: #2980b9;\n}\n\n/* Sidebar */\n.sidebar {\n  flex: 1;\n  min-width: 200px;\n  background-color: white;\n  padding: 1.5rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n  align-self: flex-start;\n}\n\n.sidebar h3 {\n  color: #2c3e50;\n  margin-bottom: 1rem;\n}\n\n.sidebar p {\n  color: #666;\n}\n\n/* Footer */\n.footer {\n  background-color: #34495e;\n  color: white;\n  text-align: center;\n  padding: 1rem;\n}\n\n/* Responsive design */\n@media (max-width: 768px) {\n  .header {\n    flex-direction: column;\n    gap: 1rem;\n  }\n  \n  .main-content {\n    flex-direction: column;\n  }\n  \n  .cards {\n    flex-direction: column;\n  }\n  \n  .card {\n    min-width: auto;\n  }\n}\n</style>\n\n<div class="container">\n  <header class="header">\n    <h1>Flexbox Layout</h1>\n    <nav>\n      <a href="#">Home</a>\n      <a href="#">About</a>\n      <a href="#">Contact</a>\n    </nav>\n  </header>\n  \n  <main class="main-content">\n    <section class="cards">\n      <div class="card">\n        <h3>Card 1</h3>\n        <p>This is the first card with some content.</p>\n        <button>Learn More</button>\n      </div>\n      <div class="card">\n        <h3>Card 2</h3>\n        <p>This is the second card with different content length to test flex behavior.</p>\n        <button>Learn More</button>\n      </div>\n      <div class="card">\n        <h3>Card 3</h3>\n        <p>Third card.</p>\n        <button>Learn More</button>\n      </div>\n    </section>\n    \n    <aside class="sidebar">\n      <h3>Sidebar</h3>\n      <p>This is a sidebar that should be flexible.</p>\n    </aside>\n  </main>\n  \n  <footer class="footer">\n    <p>&copy; 2024 Flexbox Demo</p>\n  </footer>\n</div>'
          }
        }
      },
      {
        id: 'css-7',
        title: 'CSS Grid Basics',
        description: 'Create complex two-dimensional layouts with CSS Grid',
        duration: '55 min',
        difficulty: 'intermediate',
        estimatedTime: 55,
        content: {
          theory: 'CSS Grid is a two-dimensional layout system that allows you to create complex layouts with rows and columns. It provides precise control over the placement and sizing of elements in both dimensions. Key concepts include grid container, grid items, grid lines, grid tracks, grid cells, and grid areas.',
          examples: [
            '/* Basic grid container */\n.grid-container {\n  display: grid;\n  grid-template-columns: 1fr 2fr 1fr;  /* 3 columns */\n  grid-template-rows: auto 1fr auto;   /* 3 rows */\n  gap: 20px;\n  height: 100vh;\n}\n\n/* Grid item placement */\n.header {\n  grid-column: 1 / -1;  /* Span all columns */\n  grid-row: 1;\n}\n\n.sidebar {\n  grid-column: 1;\n  grid-row: 2;\n}\n\n.main {\n  grid-column: 2;\n  grid-row: 2;\n}\n\n.aside {\n  grid-column: 3;\n  grid-row: 2;\n}\n\n.footer {\n  grid-column: 1 / -1;  /* Span all columns */\n  grid-row: 3;\n}\n\n/* Named grid lines */\n.named-grid {\n  display: grid;\n  grid-template-columns: [sidebar-start] 200px [sidebar-end main-start] 1fr [main-end];\n  grid-template-rows: [header-start] 60px [header-end content-start] 1fr [content-end];\n}\n\n/* Grid areas */\n.area-grid {\n  display: grid;\n  grid-template-areas:\n    "header header header"\n    "sidebar main aside"\n    "footer footer footer";\n  grid-template-columns: 200px 1fr 200px;\n  grid-template-rows: 60px 1fr 60px;\n}\n\n.area-header { grid-area: header; }\n.area-sidebar { grid-area: sidebar; }\n.area-main { grid-area: main; }\n.area-aside { grid-area: aside; }\n.area-footer { grid-area: footer; }\n\n/* Responsive grid */\n.responsive-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 1rem;\n}'
          ],
          challenge: {
            title: 'Build a Complete Grid Layout',
            description: 'Create a full webpage layout using CSS Grid with responsive behavior.',
            starterCode: '<style>\n/* Add your grid styles here */\n</style>\n\n<div class="grid-layout">\n  <header class="header">\n    <h1>CSS Grid Layout</h1>\n    <nav>\n      <a href="#">Home</a>\n      <a href="#">About</a>\n      <a href="#">Services</a>\n      <a href="#">Contact</a>\n    </nav>\n  </header>\n  \n  <aside class="sidebar">\n    <h3>Navigation</h3>\n    <ul>\n      <li><a href="#">Link 1</a></li>\n      <li><a href="#">Link 2</a></li>\n      <li><a href="#">Link 3</a></li>\n    </ul>\n  </aside>\n  \n  <main class="main-content">\n    <h2>Main Content</h2>\n    <div class="content-grid">\n      <article class="article">\n        <h3>Article 1</h3>\n        <p>Content for the first article.</p>\n      </article>\n      <article class="article">\n        <h3>Article 2</h3>\n        <p>Content for the second article.</p>\n      </article>\n      <article class="article featured">\n        <h3>Featured Article</h3>\n        <p>This is a featured article that spans multiple columns.</p>\n      </article>\n      <article class="article">\n        <h3>Article 3</h3>\n        <p>Content for the third article.</p>\n      </article>\n    </div>\n  </main>\n  \n  <aside class="widget-area">\n    <div class="widget">\n      <h4>Widget 1</h4>\n      <p>Widget content here.</p>\n    </div>\n    <div class="widget">\n      <h4>Widget 2</h4>\n      <p>More widget content.</p>\n    </div>\n  </aside>\n  \n  <footer class="footer">\n    <p>&copy; 2024 Grid Layout Demo</p>\n  </footer>\n</div>',
            solution: '<style>\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: Arial, sans-serif;\n  line-height: 1.6;\n}\n\n/* Main grid layout */\n.grid-layout {\n  display: grid;\n  grid-template-areas:\n    "header header header header"\n    "sidebar main main widgets"\n    "footer footer footer footer";\n  grid-template-columns: 200px 1fr 1fr 200px;\n  grid-template-rows: auto 1fr auto;\n  min-height: 100vh;\n  gap: 1rem;\n  padding: 1rem;\n  background-color: #f5f5f5;\n}\n\n/* Header */\n.header {\n  grid-area: header;\n  background-color: #2c3e50;\n  color: white;\n  padding: 1rem 2rem;\n  border-radius: 8px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.header h1 {\n  font-size: 1.5rem;\n}\n\n.header nav {\n  display: flex;\n  gap: 1.5rem;\n}\n\n.header nav a {\n  color: white;\n  text-decoration: none;\n  padding: 0.5rem 1rem;\n  border-radius: 4px;\n  transition: background-color 0.3s;\n}\n\n.header nav a:hover {\n  background-color: #34495e;\n}\n\n/* Sidebar */\n.sidebar {\n  grid-area: sidebar;\n  background-color: white;\n  padding: 1.5rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n}\n\n.sidebar h3 {\n  color: #2c3e50;\n  margin-bottom: 1rem;\n  font-size: 1.1rem;\n}\n\n.sidebar ul {\n  list-style: none;\n}\n\n.sidebar li {\n  margin-bottom: 0.5rem;\n}\n\n.sidebar a {\n  color: #666;\n  text-decoration: none;\n  padding: 0.5rem;\n  display: block;\n  border-radius: 4px;\n  transition: background-color 0.3s;\n}\n\n.sidebar a:hover {\n  background-color: #f8f9fa;\n  color: #2c3e50;\n}\n\n/* Main content */\n.main-content {\n  grid-area: main;\n  background-color: white;\n  padding: 2rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n}\n\n.main-content h2 {\n  color: #2c3e50;\n  margin-bottom: 1.5rem;\n  font-size: 1.8rem;\n}\n\n/* Content grid inside main */\n.content-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 1.5rem;\n}\n\n.article {\n  background-color: #f8f9fa;\n  padding: 1.5rem;\n  border-radius: 6px;\n  border-left: 4px solid #3498db;\n}\n\n.article.featured {\n  grid-column: 1 / -1; /* Span all columns */\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: white;\n  border-left: 4px solid #fff;\n}\n\n.article h3 {\n  color: #2c3e50;\n  margin-bottom: 0.75rem;\n  font-size: 1.2rem;\n}\n\n.article.featured h3 {\n  color: white;\n}\n\n.article p {\n  color: #666;\n  line-height: 1.6;\n}\n\n.article.featured p {\n  color: rgba(255,255,255,0.9);\n}\n\n/* Widget area */\n.widget-area {\n  grid-area: widgets;\n  display: grid;\n  gap: 1rem;\n  align-content: start;\n}\n\n.widget {\n  background-color: white;\n  padding: 1.5rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n}\n\n.widget h4 {\n  color: #2c3e50;\n  margin-bottom: 0.75rem;\n  font-size: 1.1rem;\n}\n\n.widget p {\n  color: #666;\n  font-size: 0.9rem;\n}\n\n/* Footer */\n.footer {\n  grid-area: footer;\n  background-color: #34495e;\n  color: white;\n  text-align: center;\n  padding: 1rem;\n  border-radius: 8px;\n}\n\n/* Responsive design */\n@media (max-width: 1024px) {\n  .grid-layout {\n    grid-template-areas:\n      "header header header"\n      "sidebar main widgets"\n      "footer footer footer";\n    grid-template-columns: 180px 1fr 180px;\n  }\n}\n\n@media (max-width: 768px) {\n  .grid-layout {\n    grid-template-areas:\n      "header"\n      "main"\n      "sidebar"\n      "widgets"\n      "footer";\n    grid-template-columns: 1fr;\n    gap: 0.5rem;\n    padding: 0.5rem;\n  }\n  \n  .header {\n    flex-direction: column;\n    gap: 1rem;\n    text-align: center;\n  }\n  \n  .content-grid {\n    grid-template-columns: 1fr;\n  }\n  \n  .article.featured {\n    grid-column: 1;\n  }\n}\n</style>\n\n<div class="grid-layout">\n  <header class="header">\n    <h1>CSS Grid Layout</h1>\n    <nav>\n      <a href="#">Home</a>\n      <a href="#">About</a>\n      <a href="#">Services</a>\n      <a href="#">Contact</a>\n    </nav>\n  </header>\n  \n  <aside class="sidebar">\n    <h3>Navigation</h3>\n    <ul>\n      <li><a href="#">Link 1</a></li>\n      <li><a href="#">Link 2</a></li>\n      <li><a href="#">Link 3</a></li>\n    </ul>\n  </aside>\n  \n  <main class="main-content">\n    <h2>Main Content</h2>\n    <div class="content-grid">\n      <article class="article">\n        <h3>Article 1</h3>\n        <p>Content for the first article.</p>\n      </article>\n      <article class="article">\n        <h3>Article 2</h3>\n        <p>Content for the second article.</p>\n      </article>\n      <article class="article featured">\n        <h3>Featured Article</h3>\n        <p>This is a featured article that spans multiple columns.</p>\n      </article>\n      <article class="article">\n        <h3>Article 3</h3>\n        <p>Content for the third article.</p>\n      </article>\n    </div>\n  </main>\n  \n  <aside class="widget-area">\n    <div class="widget">\n      <h4>Widget 1</h4>\n      <p>Widget content here.</p>\n    </div>\n    <div class="widget">\n      <h4>Widget 2</h4>\n      <p>More widget content.</p>\n    </div>\n  </aside>\n  \n  <footer class="footer">\n    <p>&copy; 2024 Grid Layout Demo</p>\n  </footer>\n</div>'
          }
        }
      },
      {
        id: 'css-8',
        title: 'Media Queries & Responsive Design',
        description: 'Create responsive designs that work across all device sizes',
        duration: '45 min',
        difficulty: 'intermediate',
        estimatedTime: 45,
        content: {
          theory: 'Media queries allow you to apply CSS styles based on device characteristics like screen size, orientation, and resolution. Responsive design ensures your website looks great on all devices. Key concepts include breakpoints, mobile-first approach, flexible grids, and responsive images.',
          examples: [
            '/* Mobile-first approach */\n/* Base styles for mobile */\n.container {\n  width: 100%;\n  padding: 1rem;\n}\n\n.grid {\n  display: grid;\n  grid-template-columns: 1fr;\n  gap: 1rem;\n}\n\n/* Tablet styles */\n@media (min-width: 768px) {\n  .container {\n    max-width: 750px;\n    margin: 0 auto;\n  }\n  \n  .grid {\n    grid-template-columns: repeat(2, 1fr);\n  }\n}\n\n/* Desktop styles */\n@media (min-width: 1024px) {\n  .container {\n    max-width: 1200px;\n    padding: 2rem;\n  }\n  \n  .grid {\n    grid-template-columns: repeat(3, 1fr);\n  }\n}\n\n/* Large desktop */\n@media (min-width: 1440px) {\n  .container {\n    max-width: 1400px;\n  }\n  \n  .grid {\n    grid-template-columns: repeat(4, 1fr);\n  }\n}\n\n/* Orientation queries */\n@media (orientation: landscape) {\n  .hero {\n    height: 60vh;\n  }\n}\n\n@media (orientation: portrait) {\n  .hero {\n    height: 40vh;\n  }\n}\n\n/* High DPI displays */\n@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n  .logo {\n    background-image: url("logo@2x.png");\n    background-size: 100px 50px;\n  }\n}\n\n/* Print styles */\n@media print {\n  .no-print {\n    display: none;\n  }\n  \n  body {\n    font-size: 12pt;\n    color: black;\n    background: white;\n  }\n}'
          ],
          challenge: {
            title: 'Build a Fully Responsive Website',
            description: 'Create a responsive website that adapts to different screen sizes.',
            starterCode: '<style>\n/* Add your responsive styles here */\n</style>\n\n<div class="website">\n  <header class="header">\n    <div class="container">\n      <div class="logo">ResponsiveSite</div>\n      <nav class="nav">\n        <a href="#">Home</a>\n        <a href="#">About</a>\n        <a href="#">Services</a>\n        <a href="#">Portfolio</a>\n        <a href="#">Contact</a>\n      </nav>\n      <button class="menu-toggle">‚ò∞</button>\n    </div>\n  </header>\n  \n  <section class="hero">\n    <div class="container">\n      <h1>Welcome to Our Responsive Website</h1>\n      <p>This website adapts beautifully to any screen size.</p>\n      <button class="cta-button">Get Started</button>\n    </div>\n  </section>\n  \n  <section class="features">\n    <div class="container">\n      <h2>Our Features</h2>\n      <div class="feature-grid">\n        <div class="feature">\n          <h3>Responsive Design</h3>\n          <p>Looks great on all devices.</p>\n        </div>\n        <div class="feature">\n          <h3>Fast Loading</h3>\n          <p>Optimized for speed.</p>\n        </div>\n        <div class="feature">\n          <h3>Modern UI</h3>\n          <p>Clean and contemporary design.</p>\n        </div>\n        <div class="feature">\n          <h3>SEO Friendly</h3>\n          <p>Built with SEO best practices.</p>\n        </div>\n        <div class="feature">\n          <h3>Cross Browser</h3>\n          <p>Works in all modern browsers.</p>\n        </div>\n        <div class="feature">\n          <h3>Accessible</h3>\n          <p>Designed for everyone.</p>\n        </div>\n      </div>\n    </div>\n  </section>\n  \n  <footer class="footer">\n    <div class="container">\n      <p>&copy; 2024 ResponsiveSite. All rights reserved.</p>\n    </div>\n  </footer>\n</div>',
            solution: '<style>\n/* Reset and base styles */\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;\n  line-height: 1.6;\n  color: #333;\n}\n\n/* Container */\n.container {\n  width: 100%;\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 0 1rem;\n}\n\n/* Header - Mobile First */\n.header {\n  background-color: #2c3e50;\n  color: white;\n  padding: 1rem 0;\n  position: sticky;\n  top: 0;\n  z-index: 100;\n}\n\n.header .container {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.logo {\n  font-size: 1.5rem;\n  font-weight: bold;\n}\n\n.nav {\n  display: none; /* Hidden on mobile */\n}\n\n.nav a {\n  color: white;\n  text-decoration: none;\n  margin-left: 2rem;\n  transition: color 0.3s;\n}\n\n.nav a:hover {\n  color: #3498db;\n}\n\n.menu-toggle {\n  background: none;\n  border: none;\n  color: white;\n  font-size: 1.5rem;\n  cursor: pointer;\n  display: block;\n}\n\n/* Hero Section */\n.hero {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: white;\n  text-align: center;\n  padding: 4rem 0;\n}\n\n.hero h1 {\n  font-size: 2rem;\n  margin-bottom: 1rem;\n}\n\n.hero p {\n  font-size: 1.1rem;\n  margin-bottom: 2rem;\n  opacity: 0.9;\n}\n\n.cta-button {\n  background-color: #3498db;\n  color: white;\n  border: none;\n  padding: 1rem 2rem;\n  font-size: 1.1rem;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.3s;\n}\n\n.cta-button:hover {\n  background-color: #2980b9;\n}\n\n/* Features Section */\n.features {\n  padding: 4rem 0;\n  background-color: #f8f9fa;\n}\n\n.features h2 {\n  text-align: center;\n  margin-bottom: 3rem;\n  font-size: 2rem;\n  color: #2c3e50;\n}\n\n.feature-grid {\n  display: grid;\n  grid-template-columns: 1fr;\n  gap: 2rem;\n}\n\n.feature {\n  background-color: white;\n  padding: 2rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n  text-align: center;\n  transition: transform 0.3s;\n}\n\n.feature:hover {\n  transform: translateY(-5px);\n}\n\n.feature h3 {\n  color: #2c3e50;\n  margin-bottom: 1rem;\n  font-size: 1.3rem;\n}\n\n.feature p {\n  color: #666;\n}\n\n/* Footer */\n.footer {\n  background-color: #34495e;\n  color: white;\n  text-align: center;\n  padding: 2rem 0;\n}\n\n/* Tablet Styles */\n@media (min-width: 768px) {\n  .container {\n    padding: 0 2rem;\n  }\n  \n  .menu-toggle {\n    display: none;\n  }\n  \n  .nav {\n    display: block;\n  }\n  \n  .hero h1 {\n    font-size: 3rem;\n  }\n  \n  .hero p {\n    font-size: 1.3rem;\n  }\n  \n  .feature-grid {\n    grid-template-columns: repeat(2, 1fr);\n  }\n}\n\n/* Desktop Styles */\n@media (min-width: 1024px) {\n  .hero {\n    padding: 6rem 0;\n  }\n  \n  .hero h1 {\n    font-size: 3.5rem;\n  }\n  \n  .feature-grid {\n    grid-template-columns: repeat(3, 1fr);\n  }\n  \n  .features {\n    padding: 6rem 0;\n  }\n}\n\n/* Large Desktop */\n@media (min-width: 1440px) {\n  .hero h1 {\n    font-size: 4rem;\n  }\n  \n  .hero p {\n    font-size: 1.4rem;\n  }\n}\n\n/* Small Mobile */\n@media (max-width: 480px) {\n  .hero {\n    padding: 3rem 0;\n  }\n  \n  .hero h1 {\n    font-size: 1.8rem;\n  }\n  \n  .hero p {\n    font-size: 1rem;\n  }\n  \n  .cta-button {\n    padding: 0.8rem 1.5rem;\n    font-size: 1rem;\n  }\n  \n  .feature {\n    padding: 1.5rem;\n  }\n}\n\n/* Landscape Orientation */\n@media (orientation: landscape) and (max-height: 500px) {\n  .hero {\n    padding: 2rem 0;\n  }\n  \n  .hero h1 {\n    font-size: 2rem;\n  }\n}\n\n/* Print Styles */\n@media print {\n  .header,\n  .menu-toggle,\n  .cta-button {\n    display: none;\n  }\n  \n  .hero {\n    background: none;\n    color: black;\n    padding: 2rem 0;\n  }\n  \n  .feature {\n    box-shadow: none;\n    border: 1px solid #ccc;\n  }\n}\n\n/* High DPI Displays */\n@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n  .hero {\n    background-attachment: fixed;\n  }\n}\n</style>\n\n<div class="website">\n  <header class="header">\n    <div class="container">\n      <div class="logo">ResponsiveSite</div>\n      <nav class="nav">\n        <a href="#">Home</a>\n        <a href="#">About</a>\n        <a href="#">Services</a>\n        <a href="#">Portfolio</a>\n        <a href="#">Contact</a>\n      </nav>\n      <button class="menu-toggle">‚ò∞</button>\n    </div>\n  </header>\n  \n  <section class="hero">\n    <div class="container">\n      <h1>Welcome to Our Responsive Website</h1>\n      <p>This website adapts beautifully to any screen size.</p>\n      <button class="cta-button">Get Started</button>\n    </div>\n  </section>\n  \n  <section class="features">\n    <div class="container">\n      <h2>Our Features</h2>\n      <div class="feature-grid">\n        <div class="feature">\n          <h3>Responsive Design</h3>\n          <p>Looks great on all devices.</p>\n        </div>\n        <div class="feature">\n          <h3>Fast Loading</h3>\n          <p>Optimized for speed.</p>\n        </div>\n        <div class="feature">\n          <h3>Modern UI</h3>\n          <p>Clean and contemporary design.</p>\n        </div>\n        <div class="feature">\n          <h3>SEO Friendly</h3>\n          <p>Built with SEO best practices.</p>\n        </div>\n        <div class="feature">\n          <h3>Cross Browser</h3>\n          <p>Works in all modern browsers.</p>\n        </div>\n        <div class="feature">\n          <h3>Accessible</h3>\n          <p>Designed for everyone.</p>\n        </div>\n      </div>\n    </div>\n  </section>\n  \n  <footer class="footer">\n    <div class="container">\n      <p>&copy; 2024 ResponsiveSite. All rights reserved.</p>\n    </div>\n  </footer>\n</div>'
          }
        }
      },
      {
        id: 'css-9',
        title: 'CSS Variables and Custom Properties',
        description: 'Use CSS custom properties to create maintainable and dynamic stylesheets',
        duration: '35 min',
        difficulty: 'intermediate',
        estimatedTime: 35,
        content: {
          theory: 'CSS custom properties (variables) allow you to store values that can be reused throughout your stylesheet. They provide better maintainability, theming capabilities, and dynamic styling. Variables are defined with -- prefix and used with var() function. They cascade and can be scoped to specific elements.',
          examples: [
            '/* Global variables in :root */\n:root {\n  --primary-color: #3498db;\n  --secondary-color: #2ecc71;\n  --danger-color: #e74c3c;\n  --font-size-base: 16px;\n  --font-size-large: 1.5rem;\n  --spacing-small: 0.5rem;\n  --spacing-medium: 1rem;\n  --spacing-large: 2rem;\n  --border-radius: 4px;\n  --box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n\n/* Using variables */\n.button {\n  background-color: var(--primary-color);\n  color: white;\n  padding: var(--spacing-medium) var(--spacing-large);\n  border: none;\n  border-radius: var(--border-radius);\n  font-size: var(--font-size-base);\n  box-shadow: var(--box-shadow);\n}\n\n.button--secondary {\n  background-color: var(--secondary-color);\n}\n\n.button--danger {\n  background-color: var(--danger-color);\n}\n\n/* Scoped variables */\n.dark-theme {\n  --primary-color: #2980b9;\n  --background-color: #2c3e50;\n  --text-color: #ecf0f1;\n}\n\n/* Fallback values */\n.element {\n  color: var(--text-color, #333); /* Falls back to #333 if --text-color is not defined */\n}\n\n/* Dynamic variables with JavaScript */\n.progress-bar {\n  width: var(--progress, 0%);\n  background-color: var(--primary-color);\n  transition: width 0.3s ease;\n}\n\n/* Media query variables */\n@media (prefers-color-scheme: dark) {\n  :root {\n    --background-color: #1a1a1a;\n    --text-color: #ffffff;\n    --primary-color: #4a9eff;\n  }\n}'
          ],
          challenge: {
            title: 'Create a Themeable Component System',
            description: 'Build a component system using CSS variables that supports multiple themes.',
            starterCode: '<style>\n/* Add your CSS variables and styles here */\n</style>\n\n<div class="theme-switcher">\n  <button onclick="setTheme(\'light\')">Light Theme</button>\n  <button onclick="setTheme(\'dark\')">Dark Theme</button>\n  <button onclick="setTheme(\'colorful\')">Colorful Theme</button>\n</div>\n\n<div class="app" id="app">\n  <header class="header">\n    <h1>Themeable App</h1>\n    <nav class="nav">\n      <a href="#" class="nav-link">Home</a>\n      <a href="#" class="nav-link">About</a>\n      <a href="#" class="nav-link">Contact</a>\n    </nav>\n  </header>\n  \n  <main class="main">\n    <section class="card">\n      <h2>Welcome</h2>\n      <p>This is a themeable component system built with CSS variables.</p>\n      <div class="button-group">\n        <button class="btn btn--primary">Primary Button</button>\n        <button class="btn btn--secondary">Secondary Button</button>\n        <button class="btn btn--success">Success Button</button>\n      </div>\n    </section>\n    \n    <section class="card">\n      <h2>Progress Indicators</h2>\n      <div class="progress-container">\n        <div class="progress-bar" style="--progress: 75%"></div>\n      </div>\n      <div class="progress-container">\n        <div class="progress-bar" style="--progress: 45%"></div>\n      </div>\n    </section>\n    \n    <section class="card">\n      <h2>Form Elements</h2>\n      <form class="form">\n        <input type="text" placeholder="Enter your name" class="input">\n        <textarea placeholder="Your message" class="textarea"></textarea>\n        <button type="submit" class="btn btn--primary">Submit</button>\n      </form>\n    </section>\n  </main>\n</div>\n\n<script>\nfunction setTheme(theme) {\n  document.getElementById(\'app\').className = `app theme-${theme}`;\n}\n</script>',
            solution: '<style>\n/* Base theme variables */\n:root {\n  /* Colors */\n  --primary-color: #3498db;\n  --secondary-color: #95a5a6;\n  --success-color: #2ecc71;\n  --background-color: #ffffff;\n  --surface-color: #f8f9fa;\n  --text-color: #2c3e50;\n  --text-muted: #6c757d;\n  --border-color: #dee2e6;\n  \n  /* Spacing */\n  --spacing-xs: 0.25rem;\n  --spacing-sm: 0.5rem;\n  --spacing-md: 1rem;\n  --spacing-lg: 1.5rem;\n  --spacing-xl: 2rem;\n  --spacing-xxl: 3rem;\n  \n  /* Typography */\n  --font-size-sm: 0.875rem;\n  --font-size-base: 1rem;\n  --font-size-lg: 1.125rem;\n  --font-size-xl: 1.25rem;\n  --font-size-xxl: 1.5rem;\n  --font-weight-normal: 400;\n  --font-weight-medium: 500;\n  --font-weight-bold: 700;\n  \n  /* Border and shadows */\n  --border-radius: 0.375rem;\n  --border-width: 1px;\n  --box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n  --box-shadow-lg: 0 4px 6px rgba(0, 0, 0, 0.1);\n  \n  /* Transitions */\n  --transition: all 0.2s ease;\n}\n\n/* Dark theme */\n.theme-dark {\n  --primary-color: #4a9eff;\n  --secondary-color: #6c757d;\n  --success-color: #28a745;\n  --background-color: #1a1a1a;\n  --surface-color: #2d2d2d;\n  --text-color: #ffffff;\n  --text-muted: #adb5bd;\n  --border-color: #404040;\n  --box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);\n  --box-shadow-lg: 0 4px 6px rgba(0, 0, 0, 0.3);\n}\n\n/* Colorful theme */\n.theme-colorful {\n  --primary-color: #ff6b6b;\n  --secondary-color: #4ecdc4;\n  --success-color: #45b7d1;\n  --background-color: #f7f1e3;\n  --surface-color: #ffffff;\n  --text-color: #2d3436;\n  --text-muted: #636e72;\n  --border-color: #ddd;\n}\n\n/* Base styles */\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;\n  line-height: 1.6;\n  transition: var(--transition);\n}\n\n/* Theme switcher */\n.theme-switcher {\n  position: fixed;\n  top: var(--spacing-md);\n  right: var(--spacing-md);\n  z-index: 1000;\n  display: flex;\n  gap: var(--spacing-sm);\n}\n\n.theme-switcher button {\n  padding: var(--spacing-sm) var(--spacing-md);\n  border: var(--border-width) solid var(--border-color);\n  border-radius: var(--border-radius);\n  background: var(--surface-color);\n  color: var(--text-color);\n  cursor: pointer;\n  font-size: var(--font-size-sm);\n  transition: var(--transition);\n}\n\n.theme-switcher button:hover {\n  background: var(--primary-color);\n  color: white;\n}\n\n/* App container */\n.app {\n  min-height: 100vh;\n  background-color: var(--background-color);\n  color: var(--text-color);\n  transition: var(--transition);\n}\n\n/* Header */\n.header {\n  background-color: var(--surface-color);\n  padding: var(--spacing-lg) var(--spacing-xl);\n  border-bottom: var(--border-width) solid var(--border-color);\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  box-shadow: var(--box-shadow);\n}\n\n.header h1 {\n  font-size: var(--font-size-xxl);\n  font-weight: var(--font-weight-bold);\n  color: var(--primary-color);\n}\n\n.nav {\n  display: flex;\n  gap: var(--spacing-lg);\n}\n\n.nav-link {\n  color: var(--text-color);\n  text-decoration: none;\n  font-weight: var(--font-weight-medium);\n  padding: var(--spacing-sm) var(--spacing-md);\n  border-radius: var(--border-radius);\n  transition: var(--transition);\n}\n\n.nav-link:hover {\n  background-color: var(--primary-color);\n  color: white;\n}\n\n/* Main content */\n.main {\n  padding: var(--spacing-xxl);\n  max-width: 800px;\n  margin: 0 auto;\n}\n\n/* Card component */\n.card {\n  background-color: var(--surface-color);\n  border: var(--border-width) solid var(--border-color);\n  border-radius: var(--border-radius);\n  padding: var(--spacing-xl);\n  margin-bottom: var(--spacing-xl);\n  box-shadow: var(--box-shadow-lg);\n  transition: var(--transition);\n}\n\n.card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);\n}\n\n.card h2 {\n  font-size: var(--font-size-xl);\n  font-weight: var(--font-weight-bold);\n  margin-bottom: var(--spacing-md);\n  color: var(--text-color);\n}\n\n.card p {\n  color: var(--text-muted);\n  margin-bottom: var(--spacing-lg);\n  line-height: 1.6;\n}\n\n/* Button component */\n.btn {\n  display: inline-block;\n  padding: var(--spacing-md) var(--spacing-lg);\n  border: none;\n  border-radius: var(--border-radius);\n  font-size: var(--font-size-base);\n  font-weight: var(--font-weight-medium);\n  text-decoration: none;\n  cursor: pointer;\n  transition: var(--transition);\n  margin-right: var(--spacing-sm);\n  margin-bottom: var(--spacing-sm);\n}\n\n.btn--primary {\n  background-color: var(--primary-color);\n  color: white;\n}\n\n.btn--primary:hover {\n  background-color: color-mix(in srgb, var(--primary-color) 80%, black);\n  transform: translateY(-1px);\n}\n\n.btn--secondary {\n  background-color: var(--secondary-color);\n  color: white;\n}\n\n.btn--secondary:hover {\n  background-color: color-mix(in srgb, var(--secondary-color) 80%, black);\n  transform: translateY(-1px);\n}\n\n.btn--success {\n  background-color: var(--success-color);\n  color: white;\n}\n\n.btn--success:hover {\n  background-color: color-mix(in srgb, var(--success-color) 80%, black);\n  transform: translateY(-1px);\n}\n\n.button-group {\n  display: flex;\n  flex-wrap: wrap;\n  gap: var(--spacing-sm);\n}\n\n/* Progress bar */\n.progress-container {\n  width: 100%;\n  height: 8px;\n  background-color: var(--border-color);\n  border-radius: var(--border-radius);\n  margin-bottom: var(--spacing-md);\n  overflow: hidden;\n}\n\n.progress-bar {\n  height: 100%;\n  width: var(--progress, 0%);\n  background: linear-gradient(90deg, var(--primary-color), var(--success-color));\n  border-radius: var(--border-radius);\n  transition: width 0.5s ease;\n}\n\n/* Form elements */\n.form {\n  display: flex;\n  flex-direction: column;\n  gap: var(--spacing-md);\n}\n\n.input,\n.textarea {\n  padding: var(--spacing-md);\n  border: var(--border-width) solid var(--border-color);\n  border-radius: var(--border-radius);\n  font-size: var(--font-size-base);\n  background-color: var(--background-color);\n  color: var(--text-color);\n  transition: var(--transition);\n}\n\n.input:focus,\n.textarea:focus {\n  outline: none;\n  border-color: var(--primary-color);\n  box-shadow: 0 0 0 3px color-mix(in srgb, var(--primary-color) 20%, transparent);\n}\n\n.textarea {\n  min-height: 100px;\n  resize: vertical;\n}\n\n/* Responsive design */\n@media (max-width: 768px) {\n  .header {\n    flex-direction: column;\n    gap: var(--spacing-md);\n    text-align: center;\n  }\n  \n  .main {\n    padding: var(--spacing-lg);\n  }\n  \n  .theme-switcher {\n    position: static;\n    justify-content: center;\n    margin-bottom: var(--spacing-lg);\n  }\n  \n  .button-group {\n    flex-direction: column;\n  }\n  \n  .btn {\n    margin-right: 0;\n  }\n}\n</style>\n\n<div class="theme-switcher">\n  <button onclick="setTheme(\'light\')">Light Theme</button>\n  <button onclick="setTheme(\'dark\')">Dark Theme</button>\n  <button onclick="setTheme(\'colorful\')">Colorful Theme</button>\n</div>\n\n<div class="app" id="app">\n  <header class="header">\n    <h1>Themeable App</h1>\n    <nav class="nav">\n      <a href="#" class="nav-link">Home</a>\n      <a href="#" class="nav-link">About</a>\n      <a href="#" class="nav-link">Contact</a>\n    </nav>\n  </header>\n  \n  <main class="main">\n    <section class="card">\n      <h2>Welcome</h2>\n      <p>This is a themeable component system built with CSS variables.</p>\n      <div class="button-group">\n        <button class="btn btn--primary">Primary Button</button>\n        <button class="btn btn--secondary">Secondary Button</button>\n        <button class="btn btn--success">Success Button</button>\n      </div>\n    </section>\n    \n    <section class="card">\n      <h2>Progress Indicators</h2>\n      <div class="progress-container">\n        <div class="progress-bar" style="--progress: 75%"></div>\n      </div>\n      <div class="progress-container">\n        <div class="progress-bar" style="--progress: 45%"></div>\n      </div>\n    </section>\n    \n    <section class="card">\n      <h2>Form Elements</h2>\n      <form class="form">\n        <input type="text" placeholder="Enter your name" class="input">\n        <textarea placeholder="Your message" class="textarea"></textarea>\n        <button type="submit" class="btn btn--primary">Submit</button>\n      </form>\n    </section>\n  </main>\n</div>\n\n<script>\nfunction setTheme(theme) {\n  document.getElementById(\'app\').className = `app theme-${theme}`;\n}\n</script>'
          }
        }
      },
      {
        id: 'css-10',
        title: 'CSS Animations and Transitions',
        description: 'Bring your designs to life with smooth animations and transitions',
        duration: '50 min',
        difficulty: 'intermediate',
        estimatedTime: 50,
        content: {
          theory: 'CSS animations and transitions add motion and interactivity to web pages. Transitions animate changes between states, while animations provide more complex, keyframe-based motion. Key properties include transition-property, transition-duration, animation-name, animation-duration, and timing functions for natural motion.',
          examples: [
            '/* Basic transitions */\n.button {\n  background-color: #3498db;\n  color: white;\n  padding: 1rem 2rem;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.button:hover {\n  background-color: #2980b9;\n  transform: translateY(-2px);\n  box-shadow: 0 4px 8px rgba(0,0,0,0.2);\n}\n\n/* Keyframe animations */\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes bounce {\n  0%, 20%, 50%, 80%, 100% {\n    transform: translateY(0);\n  }\n  40% {\n    transform: translateY(-30px);\n  }\n  60% {\n    transform: translateY(-15px);\n  }\n}\n\n@keyframes spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n/* Animation classes */\n.fade-in {\n  animation: fadeIn 0.6s ease-out;\n}\n\n.bounce {\n  animation: bounce 2s infinite;\n}\n\n.spin {\n  animation: spin 1s linear infinite;\n}\n\n/* Complex animations */\n@keyframes slideInFromLeft {\n  0% {\n    transform: translateX(-100%);\n    opacity: 0;\n  }\n  100% {\n    transform: translateX(0);\n    opacity: 1;\n  }\n}\n\n.slide-in {\n  animation: slideInFromLeft 0.5s ease-out;\n}\n\n/* Timing functions */\n.ease-in { transition-timing-function: ease-in; }\n.ease-out { transition-timing-function: ease-out; }\n.ease-in-out { transition-timing-function: ease-in-out; }\n.cubic-bezier { transition-timing-function: cubic-bezier(0.68, -0.55, 0.265, 1.55); }'
          ],
          challenge: {
            title: 'Create an Animated Landing Page',
            description: 'Build an engaging landing page with various animations and transitions.',
            starterCode: '<style>\n/* Add your animation styles here */\n</style>\n\n<div class="landing-page">\n  <header class="hero">\n    <div class="hero-content">\n      <h1 class="hero-title">Welcome to AnimatedSite</h1>\n      <p class="hero-subtitle">Experience the power of CSS animations</p>\n      <button class="cta-button">Get Started</button>\n    </div>\n    <div class="hero-animation">\n      <div class="floating-element"></div>\n      <div class="floating-element"></div>\n      <div class="floating-element"></div>\n    </div>\n  </header>\n  \n  <section class="features">\n    <div class="container">\n      <h2 class="section-title">Amazing Features</h2>\n      <div class="feature-grid">\n        <div class="feature-card">\n          <div class="feature-icon">üöÄ</div>\n          <h3>Fast Performance</h3>\n          <p>Lightning-fast loading times and smooth animations.</p>\n        </div>\n        <div class="feature-card">\n          <div class="feature-icon">üé®</div>\n          <h3>Beautiful Design</h3>\n          <p>Stunning visuals with carefully crafted animations.</p>\n        </div>\n        <div class="feature-card">\n          <div class="feature-icon">üì±</div>\n          <h3>Responsive</h3>\n          <p>Perfect experience across all devices and screen sizes.</p>\n        </div>\n      </div>\n    </div>\n  </section>\n  \n  <section class="interactive-demo">\n    <div class="container">\n      <h2 class="section-title">Interactive Demo</h2>\n      <div class="demo-controls">\n        <button class="demo-btn" data-animation="pulse">Pulse</button>\n        <button class="demo-btn" data-animation="shake">Shake</button>\n        <button class="demo-btn" data-animation="flip">Flip</button>\n        <button class="demo-btn" data-animation="bounce">Bounce</button>\n      </div>\n      <div class="demo-box" id="demoBox">Click a button above!</div>\n    </div>\n  </section>\n  \n  <section class="loading-demo">\n    <div class="container">\n      <h2 class="section-title">Loading Animations</h2>\n      <div class="loader-grid">\n        <div class="loader spinner"></div>\n        <div class="loader dots">\n          <div></div>\n          <div></div>\n          <div></div>\n        </div>\n        <div class="loader progress-bar">\n          <div class="progress"></div>\n        </div>\n      </div>\n    </div>\n  </section>\n</div>\n\n<script>\n// Interactive demo functionality\nconst demoButtons = document.querySelectorAll(\'.demo-btn\');\nconst demoBox = document.getElementById(\'demoBox\');\n\ndemoButtons.forEach(button => {\n  button.addEventListener(\'click\', () => {\n    const animation = button.dataset.animation;\n    demoBox.className = \'demo-box\';\n    setTimeout(() => {\n      demoBox.classList.add(animation);\n    }, 10);\n  });\n});\n</script>',
            solution: '<style>\n/* Reset and base styles */\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;\n  line-height: 1.6;\n  overflow-x: hidden;\n}\n\n.container {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 0 2rem;\n}\n\n/* Hero Section */\n.hero {\n  min-height: 100vh;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  overflow: hidden;\n}\n\n.hero-content {\n  text-align: center;\n  color: white;\n  z-index: 2;\n  animation: fadeInUp 1s ease-out;\n}\n\n.hero-title {\n  font-size: 4rem;\n  font-weight: 700;\n  margin-bottom: 1rem;\n  animation: slideInFromTop 1s ease-out 0.2s both;\n}\n\n.hero-subtitle {\n  font-size: 1.5rem;\n  margin-bottom: 2rem;\n  opacity: 0.9;\n  animation: slideInFromTop 1s ease-out 0.4s both;\n}\n\n.cta-button {\n  background: rgba(255, 255, 255, 0.2);\n  color: white;\n  border: 2px solid white;\n  padding: 1rem 2rem;\n  font-size: 1.2rem;\n  border-radius: 50px;\n  cursor: pointer;\n  backdrop-filter: blur(10px);\n  transition: all 0.3s ease;\n  animation: slideInFromTop 1s ease-out 0.6s both;\n}\n\n.cta-button:hover {\n  background: white;\n  color: #667eea;\n  transform: translateY(-3px);\n  box-shadow: 0 10px 25px rgba(0,0,0,0.2);\n}\n\n/* Floating elements */\n.hero-animation {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n}\n\n.floating-element {\n  position: absolute;\n  width: 60px;\n  height: 60px;\n  background: rgba(255, 255, 255, 0.1);\n  border-radius: 50%;\n  backdrop-filter: blur(10px);\n}\n\n.floating-element:nth-child(1) {\n  top: 20%;\n  left: 10%;\n  animation: float 6s ease-in-out infinite;\n}\n\n.floating-element:nth-child(2) {\n  top: 60%;\n  right: 10%;\n  animation: float 8s ease-in-out infinite reverse;\n}\n\n.floating-element:nth-child(3) {\n  bottom: 20%;\n  left: 50%;\n  animation: float 7s ease-in-out infinite 2s;\n}\n\n/* Features Section */\n.features {\n  padding: 6rem 0;\n  background: #f8f9fa;\n}\n\n.section-title {\n  text-align: center;\n  font-size: 3rem;\n  margin-bottom: 3rem;\n  color: #2c3e50;\n  opacity: 0;\n  animation: fadeInUp 0.8s ease-out 0.2s both;\n}\n\n.feature-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: 2rem;\n}\n\n.feature-card {\n  background: white;\n  padding: 2rem;\n  border-radius: 15px;\n  text-align: center;\n  box-shadow: 0 5px 15px rgba(0,0,0,0.1);\n  transition: all 0.3s ease;\n  opacity: 0;\n  transform: translateY(30px);\n  animation: slideInUp 0.8s ease-out forwards;\n}\n\n.feature-card:nth-child(1) { animation-delay: 0.1s; }\n.feature-card:nth-child(2) { animation-delay: 0.3s; }\n.feature-card:nth-child(3) { animation-delay: 0.5s; }\n\n.feature-card:hover {\n  transform: translateY(-10px);\n  box-shadow: 0 15px 30px rgba(0,0,0,0.15);\n}\n\n.feature-icon {\n  font-size: 3rem;\n  margin-bottom: 1rem;\n  animation: bounce 2s infinite;\n}\n\n.feature-card h3 {\n  font-size: 1.5rem;\n  margin-bottom: 1rem;\n  color: #2c3e50;\n}\n\n.feature-card p {\n  color: #666;\n  line-height: 1.6;\n}\n\n/* Interactive Demo Section */\n.interactive-demo {\n  padding: 6rem 0;\n  background: white;\n}\n\n.demo-controls {\n  display: flex;\n  justify-content: center;\n  gap: 1rem;\n  margin-bottom: 3rem;\n  flex-wrap: wrap;\n}\n\n.demo-btn {\n  background: #3498db;\n  color: white;\n  border: none;\n  padding: 0.8rem 1.5rem;\n  border-radius: 25px;\n  cursor: pointer;\n  font-size: 1rem;\n  transition: all 0.3s ease;\n}\n\n.demo-btn:hover {\n  background: #2980b9;\n  transform: translateY(-2px);\n}\n\n.demo-box {\n  width: 150px;\n  height: 150px;\n  background: linear-gradient(45deg, #ff6b6b, #4ecdc4);\n  margin: 0 auto;\n  border-radius: 15px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  font-weight: bold;\n  font-size: 1.1rem;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n/* Loading Demo Section */\n.loading-demo {\n  padding: 6rem 0;\n  background: #f8f9fa;\n}\n\n.loader-grid {\n  display: flex;\n  justify-content: center;\n  gap: 3rem;\n  flex-wrap: wrap;\n}\n\n.loader {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/* Spinner loader */\n.spinner {\n  width: 50px;\n  height: 50px;\n  border: 4px solid #f3f3f3;\n  border-top: 4px solid #3498db;\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n}\n\n/* Dots loader */\n.dots {\n  gap: 0.5rem;\n}\n\n.dots div {\n  width: 12px;\n  height: 12px;\n  background: #3498db;\n  border-radius: 50%;\n  animation: dotPulse 1.4s ease-in-out infinite both;\n}\n\n.dots div:nth-child(1) { animation-delay: -0.32s; }\n.dots div:nth-child(2) { animation-delay: -0.16s; }\n\n/* Progress bar loader */\n.progress-bar {\n  width: 200px;\n  height: 6px;\n  background: #f3f3f3;\n  border-radius: 3px;\n  overflow: hidden;\n}\n\n.progress {\n  height: 100%;\n  background: linear-gradient(90deg, #3498db, #2ecc71);\n  border-radius: 3px;\n  animation: progressMove 2s ease-in-out infinite;\n}\n\n/* Keyframe Animations */\n@keyframes fadeInUp {\n  from {\n    opacity: 0;\n    transform: translateY(30px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideInFromTop {\n  from {\n    opacity: 0;\n    transform: translateY(-50px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideInUp {\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes float {\n  0%, 100% {\n    transform: translateY(0px);\n  }\n  50% {\n    transform: translateY(-20px);\n  }\n}\n\n@keyframes bounce {\n  0%, 20%, 50%, 80%, 100% {\n    transform: translateY(0);\n  }\n  40% {\n    transform: translateY(-10px);\n  }\n  60% {\n    transform: translateY(-5px);\n  }\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n@keyframes dotPulse {\n  0%, 80%, 100% {\n    transform: scale(0);\n  }\n  40% {\n    transform: scale(1);\n  }\n}\n\n@keyframes progressMove {\n  0% {\n    transform: translateX(-100%);\n  }\n  50% {\n    transform: translateX(0%);\n  }\n  100% {\n    transform: translateX(100%);\n  }\n}\n\n/* Demo animations */\n@keyframes pulse {\n  0% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.1);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n\n@keyframes shake {\n  0%, 100% { transform: translateX(0); }\n  10%, 30%, 50%, 70%, 90% { transform: translateX(-10px); }\n  20%, 40%, 60%, 80% { transform: translateX(10px); }\n}\n\n@keyframes flip {\n  0% { transform: rotateY(0); }\n  100% { transform: rotateY(360deg); }\n}\n\n@keyframes bounceDemo {\n  0%, 20%, 50%, 80%, 100% {\n    transform: translateY(0);\n  }\n  40% {\n    transform: translateY(-30px);\n  }\n  60% {\n    transform: translateY(-15px);\n  }\n}\n\n/* Demo animation classes */\n.pulse {\n  animation: pulse 0.6s ease-in-out;\n}\n\n.shake {\n  animation: shake 0.6s ease-in-out;\n}\n\n.flip {\n  animation: flip 0.6s ease-in-out;\n}\n\n.bounce {\n  animation: bounceDemo 1s ease-in-out;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n  .hero-title {\n    font-size: 2.5rem;\n  }\n  \n  .hero-subtitle {\n    font-size: 1.2rem;\n  }\n  \n  .section-title {\n    font-size: 2rem;\n  }\n  \n  .feature-grid {\n    grid-template-columns: 1fr;\n  }\n  \n  .demo-controls {\n    flex-direction: column;\n    align-items: center;\n  }\n  \n  .loader-grid {\n    flex-direction: column;\n    align-items: center;\n  }\n}\n</style>\n\n<div class="landing-page">\n  <header class="hero">\n    <div class="hero-content">\n      <h1 class="hero-title">Welcome to AnimatedSite</h1>\n      <p class="hero-subtitle">Experience the power of CSS animations</p>\n      <button class="cta-button">Get Started</button>\n    </div>\n    <div class="hero-animation">\n      <div class="floating-element"></div>\n      <div class="floating-element"></div>\n      <div class="floating-element"></div>\n    </div>\n  </header>\n  \n  <section class="features">\n    <div class="container">\n      <h2 class="section-title">Amazing Features</h2>\n      <div class="feature-grid">\n        <div class="feature-card">\n          <div class="feature-icon">üöÄ</div>\n          <h3>Fast Performance</h3>\n          <p>Lightning-fast loading times and smooth animations.</p>\n        </div>\n        <div class="feature-card">\n          <div class="feature-icon">üé®</div>\n          <h3>Beautiful Design</h3>\n          <p>Stunning visuals with carefully crafted animations.</p>\n        </div>\n        <div class="feature-card">\n          <div class="feature-icon">üì±</div>\n          <h3>Responsive</h3>\n          <p>Perfect experience across all devices and screen sizes.</p>\n        </div>\n      </div>\n    </div>\n  </section>\n  \n  <section class="interactive-demo">\n    <div class="container">\n      <h2 class="section-title">Interactive Demo</h2>\n      <div class="demo-controls">\n        <button class="demo-btn" data-animation="pulse">Pulse</button>\n        <button class="demo-btn" data-animation="shake">Shake</button>\n        <button class="demo-btn" data-animation="flip">Flip</button>\n        <button class="demo-btn" data-animation="bounce">Bounce</button>\n      </div>\n      <div class="demo-box" id="demoBox">Click a button above!</div>\n    </div>\n  </section>\n  \n  <section class="loading-demo">\n    <div class="container">\n      <h2 class="section-title">Loading Animations</h2>\n      <div class="loader-grid">\n        <div class="loader spinner"></div>\n        <div class="loader dots">\n          <div></div>\n          <div></div>\n          <div></div>\n        </div>\n        <div class="loader progress-bar">\n          <div class="progress"></div>\n        </div>\n      </div>\n    </div>\n  </section>\n</div>\n\n<script>\n// Interactive demo functionality\nconst demoButtons = document.querySelectorAll(\'.demo-btn\');\nconst demoBox = document.getElementById(\'demoBox\');\n\ndemoButtons.forEach(button => {\n  button.addEventListener(\'click\', () => {\n    const animation = button.dataset.animation;\n    demoBox.className = \'demo-box\';\n    setTimeout(() => {\n      demoBox.classList.add(animation);\n    }, 10);\n  });\n});\n</script>'
          }
        }
      }
    ]
  },
  {
    id: 'javascript',
    title: 'JavaScript Programming',
    description: 'Add interactivity with JavaScript',
    icon: '‚ö°',
    color: 'from-yellow-400 to-orange-500',
    totalLessons: 12,
    estimatedHours: 8,
    lessons: [
      {
        id: 'js-1',
        title: 'Introduction and Syntax',
        description: 'Learn JavaScript basics, syntax, and how to run JavaScript code',
        duration: '40 min',
        difficulty: 'beginner',
        estimatedTime: 40,
        content: {
          theory: 'JavaScript is a high-level, interpreted programming language that enables interactive web pages. It\'s an essential part of web applications alongside HTML and CSS. JavaScript can be run in browsers and on servers (Node.js). Key concepts include statements, expressions, comments, and the basic syntax rules.',
          examples: [
            '// This is a single-line comment\n\n/* This is a\n   multi-line comment */\n\n// JavaScript statements\nconsole.log("Hello, World!");\nalert("Welcome to JavaScript!");\n\n// Variables and basic operations\nlet message = "Learning JavaScript";\nlet number = 42;\nlet isActive = true;\n\n// Basic arithmetic\nlet sum = 10 + 5;\nlet product = 4 * 7;\nlet remainder = 17 % 5;\n\n// String operations\nlet firstName = "John";\nlet lastName = "Doe";\nlet fullName = firstName + " " + lastName;\n\n// Output to console\nconsole.log("Sum:", sum);\nconsole.log("Full name:", fullName);'
          ],
          challenge: {
            title: 'Write Your First JavaScript Program',
            description: 'Create a simple program that performs basic calculations and displays results.',
            starterCode: '// Write your JavaScript code here\n// 1. Create variables for your name and age\n// 2. Calculate your birth year\n// 3. Display a greeting message\n\n',
            solution: '// Write your JavaScript code here\n// 1. Create variables for your name and age\nlet name = "Alice";\nlet age = 25;\n\n// 2. Calculate your birth year\nlet currentYear = 2024;\nlet birthYear = currentYear - age;\n\n// 3. Display a greeting message\nconsole.log("Hello, my name is " + name);\nconsole.log("I am " + age + " years old");\nconsole.log("I was born in " + birthYear);\n\n// Bonus: Create a complete message\nlet message = `Hi! I\'m ${name}, I\'m ${age} years old and I was born in ${birthYear}.`;\nconsole.log(message);'
          }
        }
      },
      {
        id: 'js-2',
        title: 'Variables (var, let, const)',
        description: 'Understand different ways to declare variables and their scope differences',
        duration: '35 min',
        difficulty: 'beginner',
        estimatedTime: 35,
        content: {
          theory: 'JavaScript has three ways to declare variables: var, let, and const. Each has different scoping rules and behaviors. var has function scope and can be redeclared, let has block scope and can be reassigned, const has block scope and cannot be reassigned. Understanding these differences is crucial for writing reliable code.',
          examples: [
            '// var - function scoped, can be redeclared\nvar name = "John";\nvar name = "Jane"; // This is allowed\nvar age = 25;\n\nfunction example() {\n  var localVar = "I\'m local";\n  if (true) {\n    var insideIf = "I\'m still function scoped";\n  }\n  console.log(insideIf); // This works!\n}\n\n// let - block scoped, can be reassigned\nlet count = 0;\ncount = 1; // This is allowed\n// let count = 2; // This would cause an error\n\nif (true) {\n  let blockScoped = "I\'m block scoped";\n  console.log(blockScoped); // This works\n}\n// console.log(blockScoped); // This would cause an error\n\n// const - block scoped, cannot be reassigned\nconst PI = 3.14159;\n// PI = 3.14; // This would cause an error\n\nconst person = {\n  name: "Alice",\n  age: 30\n};\n// person = {}; // This would cause an error\nperson.age = 31; // But this is allowed (modifying object properties)\n\nconst numbers = [1, 2, 3];\nnumbers.push(4); // This is allowed (modifying array contents)\nconsole.log(numbers); // [1, 2, 3, 4]'
          ],
          challenge: {
            title: 'Practice Variable Declarations',
            description: 'Use different variable declarations appropriately in various scenarios.',
            starterCode: '// Fix the variable declarations below\n// Use const for values that won\'t change\n// Use let for values that will change\n// Avoid using var\n\n// User information\nname = "Sarah";\nage = 28;\n\n// Constants\nMAX_USERS = 100;\nAPI_URL = "https://api.example.com";\n\n// Counter that will be incremented\ncounter = 0;\n\n// Shopping cart (will be modified)\ncart = [];\n\n// Display the information\nconsole.log("User:", name, "Age:", age);\nconsole.log("Max users:", MAX_USERS);\nconsole.log("Counter:", counter);\nconsole.log("Cart:", cart);',
            solution: '// Fix the variable declarations below\n// Use const for values that won\'t change\n// Use let for values that will change\n// Avoid using var\n\n// User information\nlet name = "Sarah"; // might change during user session\nlet age = 28; // might be updated\n\n// Constants\nconst MAX_USERS = 100; // never changes\nconst API_URL = "https://api.example.com"; // never changes\n\n// Counter that will be incremented\nlet counter = 0; // will be modified\n\n// Shopping cart (will be modified)\nconst cart = []; // array reference won\'t change, but contents will\n\n// Display the information\nconsole.log("User:", name, "Age:", age);\nconsole.log("Max users:", MAX_USERS);\nconsole.log("Counter:", counter);\nconsole.log("Cart:", cart);\n\n// Demonstrate usage\ncounter++; // increment counter\ncart.push("item1", "item2"); // add items to cart\nage = 29; // update age\n\nconsole.log("Updated counter:", counter);\nconsole.log("Updated cart:", cart);\nconsole.log("Updated age:", age);'
          }
        }
      },
      {
        id: 'js-3',
        title: 'Data Types and Operators',
        description: 'Explore JavaScript data types and learn to use various operators',
        duration: '45 min',
        difficulty: 'beginner',
        estimatedTime: 45,
        content: {
          theory: 'JavaScript has several data types: primitives (string, number, boolean, undefined, null, symbol, bigint) and objects (including arrays and functions). Operators perform operations on these values: arithmetic (+, -, *, /), comparison (==, ===, !=, !==), logical (&&, ||, !), and assignment (=, +=, -=). Understanding type coercion and strict vs loose equality is important.',
          examples: [
            '// Primitive Data Types\n\n// String\nlet firstName = "John";\nlet lastName = \'Doe\';\nlet template = `Hello, ${firstName} ${lastName}!`;\n\n// Number\nlet integer = 42;\nlet decimal = 3.14;\nlet negative = -10;\nlet infinity = Infinity;\nlet notANumber = NaN;\n\n// Boolean\nlet isActive = true;\nlet isComplete = false;\n\n// Undefined\nlet undefinedVar;\nconsole.log(undefinedVar); // undefined\n\n// Null\nlet emptyValue = null;\n\n// Symbol (ES6)\nlet symbol1 = Symbol("id");\nlet symbol2 = Symbol("id");\nconsole.log(symbol1 === symbol2); // false\n\n// BigInt (ES2020)\nlet bigNumber = 123456789012345678901234567890n;\n\n// Object Types\nlet person = {\n  name: "Alice",\n  age: 30,\n  isStudent: false\n};\n\nlet numbers = [1, 2, 3, 4, 5];\n\nlet greet = function(name) {\n  return `Hello, ${name}!`;\n};\n\n// Operators\n\n// Arithmetic Operators\nlet a = 10;\nlet b = 3;\nconsole.log(a + b); // 13 (addition)\nconsole.log(a - b); // 7 (subtraction)\nconsole.log(a * b); // 30 (multiplication)\nconsole.log(a / b); // 3.333... (division)\nconsole.log(a % b); // 1 (modulus)\nconsole.log(a ** b); // 1000 (exponentiation)\n\n// Comparison Operators\nconsole.log(5 == "5");  // true (loose equality)\nconsole.log(5 === "5"); // false (strict equality)\nconsole.log(5 != "5");  // false\nconsole.log(5 !== "5"); // true\nconsole.log(10 > 5);    // true\nconsole.log(10 < 5);    // false\n\n// Logical Operators\nlet x = true;\nlet y = false;\nconsole.log(x && y); // false (AND)\nconsole.log(x || y); // true (OR)\nconsole.log(!x);     // false (NOT)\n\n// Assignment Operators\nlet count = 0;\ncount += 5;  // count = count + 5\ncount -= 2;  // count = count - 2\ncount *= 3;  // count = count * 3\ncount /= 2;  // count = count / 2\nconsole.log(count); // 4.5'
          ],
          challenge: {
            title: 'Build a Simple Calculator',
            description: 'Create a calculator that performs various operations and handles different data types.',
            starterCode: '// Create a simple calculator\n// Define two numbers and perform various operations\n\nlet num1 = 15;\nlet num2 = 4;\n\n// Perform calculations here\n// Add, subtract, multiply, divide, and find remainder\n\n// Also demonstrate type checking and comparisons\n\n// Display results',
            solution: '// Create a simple calculator\n// Define two numbers and perform various operations\n\nlet num1 = 15;\nlet num2 = 4;\n\n// Basic arithmetic operations\nlet addition = num1 + num2;\nlet subtraction = num1 - num2;\nlet multiplication = num1 * num2;\nlet division = num1 / num2;\nlet remainder = num1 % num2;\nlet power = num1 ** 2;\n\nconsole.log("=== CALCULATOR RESULTS ===");\nconsole.log(`${num1} + ${num2} = ${addition}`);\nconsole.log(`${num1} - ${num2} = ${subtraction}`);\nconsole.log(`${num1} * ${num2} = ${multiplication}`);\nconsole.log(`${num1} / ${num2} = ${division}`);\nconsole.log(`${num1} % ${num2} = ${remainder}`);\nconsole.log(`${num1} ** 2 = ${power}`);\n\n// Type checking\nconsole.log("\\n=== TYPE CHECKING ===");\nconsole.log(`Type of num1: ${typeof num1}`);\nconsole.log(`Type of addition: ${typeof addition}`);\nconsole.log(`Type of "15": ${typeof "15"}`);\n\n// Comparisons\nconsole.log("\\n=== COMPARISONS ===");\nconsole.log(`${num1} > ${num2}: ${num1 > num2}`);\nconsole.log(`${num1} === 15: ${num1 === 15}`);\nconsole.log(`${num1} == "15": ${num1 == "15"}`);\nconsole.log(`${num1} === "15": ${num1 === "15"}`);\n\n// Logical operations\nlet isPositive = num1 > 0 && num2 > 0;\nlet hasEvenNumber = num1 % 2 === 0 || num2 % 2 === 0;\n\nconsole.log("\\n=== LOGICAL OPERATIONS ===");\nconsole.log(`Both numbers are positive: ${isPositive}`);\nconsole.log(`At least one number is even: ${hasEvenNumber}`);\n\n// Assignment operators demonstration\nlet counter = 10;\nconsole.log("\\n=== ASSIGNMENT OPERATORS ===");\nconsole.log(`Initial counter: ${counter}`);\ncounter += 5;\nconsole.log(`After += 5: ${counter}`);\ncounter *= 2;\nconsole.log(`After *= 2: ${counter}`);\ncounter /= 3;\nconsole.log(`After /= 3: ${counter}`);\n\n// Working with different data types\nlet stringNumber = "25";\nlet result1 = num1 + stringNumber; // Concatenation\nlet result2 = num1 + Number(stringNumber); // Addition\n\nconsole.log("\\n=== TYPE COERCION ===");\nconsole.log(`${num1} + "${stringNumber}" = "${result1}" (concatenation)`);\nconsole.log(`${num1} + Number("${stringNumber}") = ${result2} (addition)`);'
          }
        }
      },
      {
        id: 'js-4',
        title: 'Conditionals and Loops',
        description: 'Control program flow with if statements, switch cases, and various loop types',
        duration: '50 min',
        difficulty: 'beginner',
        estimatedTime: 50,
        content: {
          theory: 'Control structures direct the flow of program execution. Conditional statements (if, else if, else, switch) execute code based on conditions. Loops (for, while, do-while, for...in, for...of) repeat code blocks. Understanding when to use each type and how to avoid infinite loops is essential for effective programming.',
          examples: [
            '// Conditional Statements\n\n// if, else if, else\nlet score = 85;\nlet grade;\n\nif (score >= 90) {\n  grade = "A";\n} else if (score >= 80) {\n  grade = "B";\n} else if (score >= 70) {\n  grade = "C";\n} else if (score >= 60) {\n  grade = "D";\n} else {\n  grade = "F";\n}\n\nconsole.log(`Score: ${score}, Grade: ${grade}`);\n\n// Ternary operator\nlet age = 20;\nlet canVote = age >= 18 ? "Yes" : "No";\nconsole.log(`Can vote: ${canVote}`);\n\n// Switch statement\nlet day = "Monday";\nlet dayType;\n\nswitch (day) {\n  case "Monday":\n  case "Tuesday":\n  case "Wednesday":\n  case "Thursday":\n  case "Friday":\n    dayType = "Weekday";\n    break;\n  case "Saturday":\n  case "Sunday":\n    dayType = "Weekend";\n    break;\n  default:\n    dayType = "Invalid day";\n}\n\nconsole.log(`${day} is a ${dayType}`);\n\n// Loops\n\n// for loop\nconsole.log("\\nCounting with for loop:");\nfor (let i = 1; i <= 5; i++) {\n  console.log(`Count: ${i}`);\n}\n\n// while loop\nconsole.log("\\nCountdown with while loop:");\nlet countdown = 5;\nwhile (countdown > 0) {\n  console.log(`${countdown}...`);\n  countdown--;\n}\nconsole.log("Blast off!");\n\n// do-while loop\nconsole.log("\\nDo-while loop (executes at least once):");\nlet attempts = 0;\ndo {\n  attempts++;\n  console.log(`Attempt ${attempts}`);\n} while (attempts < 3);\n\n// for...in loop (for object properties)\nlet person = {\n  name: "Alice",\n  age: 30,\n  city: "New York"\n};\n\nconsole.log("\\nObject properties with for...in:");\nfor (let key in person) {\n  console.log(`${key}: ${person[key]}`);\n}\n\n// for...of loop (for iterable values)\nlet fruits = ["apple", "banana", "orange"];\n\nconsole.log("\\nArray values with for...of:");\nfor (let fruit of fruits) {\n  console.log(`Fruit: ${fruit}`);\n}\n\n// Loop control statements\nconsole.log("\\nLoop control with break and continue:");\nfor (let i = 1; i <= 10; i++) {\n  if (i === 5) {\n    continue; // Skip 5\n  }\n  if (i === 8) {\n    break; // Stop at 8\n  }\n  console.log(i);\n}\n\n// Nested loops\nconsole.log("\\nMultiplication table (nested loops):");\nfor (let i = 1; i <= 3; i++) {\n  for (let j = 1; j <= 3; j++) {\n    console.log(`${i} x ${j} = ${i * j}`);\n  }\n}'
          ],
          challenge: {
            title: 'Create a Number Guessing Game',
            description: 'Build a simple number guessing game using conditionals and loops.',
            starterCode: '// Number Guessing Game\n// The computer picks a random number between 1 and 10\n// User has 3 attempts to guess it\n// Provide feedback after each guess\n\n// Generate random number (1-10)\nlet targetNumber = Math.floor(Math.random() * 10) + 1;\nlet maxAttempts = 3;\nlet currentAttempt = 1;\n\nconsole.log("Welcome to the Number Guessing Game!");\nconsole.log("I\'m thinking of a number between 1 and 10.");\nconsole.log(`You have ${maxAttempts} attempts to guess it.`);\n\n// Simulate user guesses (in a real game, you\'d get input from user)\nlet userGuesses = [3, 7, 5]; // Example guesses\n\n// Implement the game logic here\n// Use loops and conditionals to:\n// 1. Check each guess\n// 2. Provide feedback (too high, too low, correct)\n// 3. Track attempts\n// 4. End game when won or out of attempts',
            solution: '// Number Guessing Game\n// The computer picks a random number between 1 and 10\n// User has 3 attempts to guess it\n// Provide feedback after each guess\n\n// Generate random number (1-10)\nlet targetNumber = Math.floor(Math.random() * 10) + 1;\nlet maxAttempts = 3;\nlet currentAttempt = 1;\nlet gameWon = false;\n\nconsole.log("Welcome to the Number Guessing Game!");\nconsole.log("I\'m thinking of a number between 1 and 10.");\nconsole.log(`You have ${maxAttempts} attempts to guess it.`);\nconsole.log(`(Secret number is ${targetNumber} - for testing)`);\n\n// Simulate user guesses (in a real game, you\'d get input from user)\nlet userGuesses = [3, 7, 5]; // Example guesses\n\n// Game loop\nfor (let i = 0; i < userGuesses.length && currentAttempt <= maxAttempts && !gameWon; i++) {\n  let guess = userGuesses[i];\n  \n  console.log(`\\nAttempt ${currentAttempt}: You guessed ${guess}`);\n  \n  // Check the guess\n  if (guess === targetNumber) {\n    console.log("üéâ Congratulations! You guessed the correct number!");\n    gameWon = true;\n  } else if (guess < targetNumber) {\n    console.log("üìà Too low! Try a higher number.");\n  } else {\n    console.log("üìâ Too high! Try a lower number.");\n  }\n  \n  currentAttempt++;\n  \n  // Show remaining attempts if game not won\n  if (!gameWon && currentAttempt <= maxAttempts) {\n    let remaining = maxAttempts - currentAttempt + 1;\n    console.log(`You have ${remaining} attempt(s) remaining.`);\n  }\n}\n\n// End game message\nif (!gameWon) {\n  console.log(`\\nüòû Game Over! You\'ve used all ${maxAttempts} attempts.`);\n  console.log(`The correct number was ${targetNumber}.`);\n}\n\n// Game statistics\nconsole.log("\\n=== GAME STATISTICS ===");\nconsole.log(`Target number: ${targetNumber}`);\nconsole.log(`Attempts used: ${currentAttempt - 1}`);\nconsole.log(`Game result: ${gameWon ? "Won" : "Lost"}`);\n\n// Bonus: Analyze the guesses\nconsole.log("\\n=== GUESS ANALYSIS ===");\nfor (let i = 0; i < userGuesses.length && i < currentAttempt - 1; i++) {\n  let guess = userGuesses[i];\n  let difference = Math.abs(guess - targetNumber);\n  let accuracy;\n  \n  if (difference === 0) {\n    accuracy = "Perfect!";\n  } else if (difference <= 2) {\n    accuracy = "Very close";\n  } else if (difference <= 4) {\n    accuracy = "Close";\n  } else {\n    accuracy = "Far off";\n  }\n  \n  console.log(`Guess ${i + 1}: ${guess} (${accuracy}, off by ${difference})`);\n}\n\n// Additional game features demonstration\nconsole.log("\\n=== BONUS FEATURES ===");\n\n// Check if any guess was within 1 of the target\nlet hasCloseGuess = false;\nfor (let guess of userGuesses) {\n  if (Math.abs(guess - targetNumber) <= 1 && guess !== targetNumber) {\n    hasCloseGuess = true;\n    break;\n  }\n}\n\nif (hasCloseGuess) {\n  console.log("üéØ You had at least one guess very close to the target!");\n}\n\n// Calculate average guess\nlet totalGuesses = 0;\nlet guessCount = Math.min(userGuesses.length, currentAttempt - 1);\n\nfor (let i = 0; i < guessCount; i++) {\n  totalGuesses += userGuesses[i];\n}\n\nlet averageGuess = totalGuesses / guessCount;\nconsole.log(`üìä Your average guess was: ${averageGuess.toFixed(1)}`);\n\n// Determine strategy\nlet strategy;\nif (averageGuess < targetNumber) {\n  strategy = "You tended to guess too low";\n} else if (averageGuess > targetNumber) {\n  strategy = "You tended to guess too high";\n} else {\n  strategy = "Your guesses were well-balanced";\n}\n\nconsole.log(`üß† Strategy analysis: ${strategy}`);'
          }
        }
      },
      {
        id: 'js-5',
        title: 'Functions and Scope',
        description: 'Create reusable code with functions and understand variable scope',
        duration: '55 min',
        difficulty: 'intermediate',
        estimatedTime: 55,
        content: {
          theory: 'Functions are reusable blocks of code that perform specific tasks. They can accept parameters, return values, and help organize code. JavaScript has function declarations, function expressions, and arrow functions. Scope determines where variables can be accessed: global scope, function scope, and block scope. Understanding closures and the this keyword is important for advanced JavaScript.',
          examples: [
            '// Function Declaration\nfunction greet(name) {\n  return `Hello, ${name}!`;\n}\n\nconsole.log(greet("Alice")); // Hello, Alice!\n\n// Function Expression\nconst add = function(a, b) {\n  return a + b;\n};\n\nconsole.log(add(5, 3)); // 8\n\n// Arrow Functions (ES6)\nconst multiply = (a, b) => a * b;\nconst square = x => x * x;\nconst sayHello = () => "Hello, World!";\n\nconsole.log(multiply(4, 5)); // 20\nconsole.log(square(6)); // 36\nconsole.log(sayHello()); // Hello, World!\n\n// Function with Default Parameters\nfunction createUser(name, age = 18, role = "user") {\n  return {\n    name: name,\n    age: age,\n    role: role\n  };\n}\n\nconsole.log(createUser("Bob")); // {name: "Bob", age: 18, role: "user"}\nconsole.log(createUser("Carol", 25, "admin")); // {name: "Carol", age: 25, role: "admin"}\n\n// Rest Parameters\nfunction sum(...numbers) {\n  let total = 0;\n  for (let num of numbers) {\n    total += num;\n  }\n  return total;\n}\n\nconsole.log(sum(1, 2, 3, 4, 5)); // 15\n\n// Scope Examples\n\n// Global Scope\nlet globalVar = "I\'m global";\n\nfunction demonstrateScope() {\n  // Function Scope\n  let functionVar = "I\'m in function scope";\n  \n  if (true) {\n    // Block Scope\n    let blockVar = "I\'m in block scope";\n    const blockConst = "I\'m also in block scope";\n    \n    console.log(globalVar); // Accessible\n    console.log(functionVar); // Accessible\n    console.log(blockVar); // Accessible\n  }\n  \n  console.log(globalVar); // Accessible\n  console.log(functionVar); // Accessible\n  // console.log(blockVar); // Error: not accessible\n}\n\ndemonstrateScope();\n\n// Closures\nfunction outerFunction(x) {\n  // This is the outer function\'s scope\n  \n  function innerFunction(y) {\n    // Inner function has access to outer function\'s variables\n    return x + y;\n  }\n  \n  return innerFunction;\n}\n\nconst addFive = outerFunction(5);\nconsole.log(addFive(3)); // 8 (5 + 3)\n\n// Practical Closure Example - Counter\nfunction createCounter() {\n  let count = 0;\n  \n  return {\n    increment: () => ++count,\n    decrement: () => --count,\n    getCount: () => count\n  };\n}\n\nconst counter = createCounter();\nconsole.log(counter.increment()); // 1\nconsole.log(counter.increment()); // 2\nconsole.log(counter.getCount()); // 2\nconsole.log(counter.decrement()); // 1\n\n// Higher-Order Functions\nfunction applyOperation(a, b, operation) {\n  return operation(a, b);\n}\n\nconst addFunc = (x, y) => x + y;\nconst multiplyFunc = (x, y) => x * y;\n\nconsole.log(applyOperation(10, 5, addFunc)); // 15\nconsole.log(applyOperation(10, 5, multiplyFunc)); // 50\n\n// Function that returns a function\nfunction createMultiplier(multiplier) {\n  return function(number) {\n    return number * multiplier;\n  };\n}\n\nconst double = createMultiplier(2);\nconst triple = createMultiplier(3);\n\nconsole.log(double(5)); // 10\nconsole.log(triple(5)); // 15\n\n// Immediately Invoked Function Expression (IIFE)\n(function() {\n  let privateVar = "This is private";\n  console.log("IIFE executed!");\n  console.log(privateVar);\n})();\n\n// Arrow function IIFE\n(() => {\n  console.log("Arrow IIFE executed!");\n})();'
          ],
          challenge: {
            title: 'Build a Task Manager with Functions',
            description: 'Create a task management system using various function types and scope concepts.',
            starterCode: '// Task Manager System\n// Create functions to manage a list of tasks\n// Each task should have: id, title, completed status, priority\n\n// Global task storage\nlet tasks = [];\nlet nextId = 1;\n\n// TODO: Create the following functions:\n// 1. addTask(title, priority = "medium") - adds a new task\n// 2. completeTask(id) - marks a task as completed\n// 3. deleteTask(id) - removes a task\n// 4. getTasks() - returns all tasks\n// 5. getTasksByPriority(priority) - returns tasks with specific priority\n// 6. getTaskStats() - returns statistics about tasks\n\n// Test your functions\nconsole.log("=== TASK MANAGER DEMO ===");\n\n// Add some tasks\n// addTask("Learn JavaScript", "high");\n// addTask("Build a website");\n// addTask("Read a book", "low");\n\n// Display tasks\n// console.log("All tasks:", getTasks());\n\n// Complete a task\n// completeTask(1);\n\n// Show statistics\n// console.log("Task statistics:", getTaskStats());',
            solution: '// Task Manager System\n// Create functions to manage a list of tasks\n// Each task should have: id, title, completed status, priority\n\n// Global task storage\nlet tasks = [];\nlet nextId = 1;\n\n// Function to add a new task\nfunction addTask(title, priority = "medium") {\n  const validPriorities = ["low", "medium", "high"];\n  \n  if (!title || title.trim() === "") {\n    console.log("‚ùå Error: Task title cannot be empty");\n    return null;\n  }\n  \n  if (!validPriorities.includes(priority)) {\n    console.log("‚ùå Error: Priority must be low, medium, or high");\n    return null;\n  }\n  \n  const newTask = {\n    id: nextId++,\n    title: title.trim(),\n    completed: false,\n    priority: priority,\n    createdAt: new Date().toISOString()\n  };\n  \n  tasks.push(newTask);\n  console.log(`‚úÖ Task added: "${newTask.title}" (Priority: ${newTask.priority})`);\n  return newTask;\n}\n\n// Function to mark a task as completed\nfunction completeTask(id) {\n  const task = tasks.find(task => task.id === id);\n  \n  if (!task) {\n    console.log(`‚ùå Error: Task with ID ${id} not found`);\n    return false;\n  }\n  \n  if (task.completed) {\n    console.log(`‚ÑπÔ∏è Task "${task.title}" is already completed`);\n    return true;\n  }\n  \n  task.completed = true;\n  task.completedAt = new Date().toISOString();\n  console.log(`üéâ Task completed: "${task.title}"`);\n  return true;\n}\n\n// Function to delete a task\nfunction deleteTask(id) {\n  const taskIndex = tasks.findIndex(task => task.id === id);\n  \n  if (taskIndex === -1) {\n    console.log(`‚ùå Error: Task with ID ${id} not found`);\n    return false;\n  }\n  \n  const deletedTask = tasks.splice(taskIndex, 1)[0];\n  console.log(`üóëÔ∏è Task deleted: "${deletedTask.title}"`);\n  return true;\n}\n\n// Function to get all tasks\nfunction getTasks() {\n  return [...tasks]; // Return a copy to prevent external modification\n}\n\n// Function to get tasks by priority\nfunction getTasksByPriority(priority) {\n  const validPriorities = ["low", "medium", "high"];\n  \n  if (!validPriorities.includes(priority)) {\n    console.log("‚ùå Error: Invalid priority. Use low, medium, or high");\n    return [];\n  }\n  \n  return tasks.filter(task => task.priority === priority);\n}\n\n// Function to get task statistics\nfunction getTaskStats() {\n  const total = tasks.length;\n  const completed = tasks.filter(task => task.completed).length;\n  const pending = total - completed;\n  \n  const priorityStats = {\n    high: tasks.filter(task => task.priority === "high").length,\n    medium: tasks.filter(task => task.priority === "medium").length,\n    low: tasks.filter(task => task.priority === "low").length\n  };\n  \n  return {\n    total,\n    completed,\n    pending,\n    completionRate: total > 0 ? Math.round((completed / total) * 100) : 0,\n    priorityBreakdown: priorityStats\n  };\n}\n\n// Advanced function using closures - Create a task filter\nfunction createTaskFilter() {\n  let currentFilter = "all";\n  \n  return {\n    setFilter: (filter) => {\n      const validFilters = ["all", "completed", "pending", "high", "medium", "low"];\n      if (validFilters.includes(filter)) {\n        currentFilter = filter;\n        console.log(`üîç Filter set to: ${filter}`);\n      } else {\n        console.log("‚ùå Invalid filter");\n      }\n    },\n    \n    getFilteredTasks: () => {\n      switch (currentFilter) {\n        case "all":\n          return tasks;\n        case "completed":\n          return tasks.filter(task => task.completed);\n        case "pending":\n          return tasks.filter(task => !task.completed);\n        case "high":\n        case "medium":\n        case "low":\n          return tasks.filter(task => task.priority === currentFilter);\n        default:\n          return tasks;\n      }\n    },\n    \n    getCurrentFilter: () => currentFilter\n  };\n}\n\n// Higher-order function for task operations\nconst performTaskOperation = (operation) => {\n  return (taskId) => {\n    const task = tasks.find(t => t.id === taskId);\n    if (task) {\n      return operation(task);\n    } else {\n      console.log(`‚ùå Task with ID ${taskId} not found`);\n      return null;\n    }\n  };\n};\n\n// Create specific operations using the higher-order function\nconst getTaskTitle = performTaskOperation(task => task.title);\nconst getTaskPriority = performTaskOperation(task => task.priority);\nconst isTaskCompleted = performTaskOperation(task => task.completed);\n\n// Utility function with default parameters and rest parameters\nfunction displayTasks(title = "Tasks", ...taskIds) {\n  console.log(`\\n=== ${title.toUpperCase()} ===`);\n  \n  let tasksToShow;\n  if (taskIds.length > 0) {\n    tasksToShow = tasks.filter(task => taskIds.includes(task.id));\n  } else {\n    tasksToShow = tasks;\n  }\n  \n  if (tasksToShow.length === 0) {\n    console.log("üìù No tasks to display");\n    return;\n  }\n  \n  tasksToShow.forEach(task => {\n    const status = task.completed ? "‚úÖ" : "‚è≥";\n    const priority = task.priority.toUpperCase();\n    console.log(`${status} [${priority}] ${task.title} (ID: ${task.id})`);\n  });\n}\n\n// Test the task manager system\nconsole.log("=== TASK MANAGER DEMO ===");\n\n// Add some tasks\naddTask("Learn JavaScript", "high");\naddTask("Build a website");\naddTask("Read a book", "low");\naddTask("Exercise", "medium");\naddTask("", "high"); // This should fail\n\n// Display all tasks\ndisplayTasks("All Tasks");\n\n// Complete some tasks\ncompleteTask(1);\ncompleteTask(3);\ncompleteTask(999); // This should fail\n\n// Display tasks by priority\nconsole.log("\\n=== HIGH PRIORITY TASKS ===");\nconst highPriorityTasks = getTasksByPriority("high");\nhighPriorityTasks.forEach(task => {\n  const status = task.completed ? "‚úÖ" : "‚è≥";\n  console.log(`${status} ${task.title}`);\n});\n\n// Show statistics\nconsole.log("\\n=== TASK STATISTICS ===");\nconst stats = getTaskStats();\nconsole.log(`üìä Total tasks: ${stats.total}`);\nconsole.log(`‚úÖ Completed: ${stats.completed}`);\nconsole.log(`‚è≥ Pending: ${stats.pending}`);\nconsole.log(`üìà Completion rate: ${stats.completionRate}%`);\nconsole.log(`üéØ Priority breakdown:`, stats.priorityBreakdown);\n\n// Demonstrate closure with task filter\nconsole.log("\\n=== TASK FILTERING DEMO ===");\nconst taskFilter = createTaskFilter();\ntaskFilter.setFilter("completed");\nconsole.log("Completed tasks:", taskFilter.getFilteredTasks().map(t => t.title));\n\ntaskFilter.setFilter("high");\nconsole.log("High priority tasks:", taskFilter.getFilteredTasks().map(t => t.title));\n\n// Demonstrate higher-order functions\nconsole.log("\\n=== TASK OPERATIONS DEMO ===");\nconsole.log(`Task 1 title: ${getTaskTitle(1)}`);\nconsole.log(`Task 2 priority: ${getTaskPriority(2)}`);\nconsole.log(`Task 1 completed: ${isTaskCompleted(1)}`);\n\n// Display specific tasks\ndisplayTasks("Selected Tasks", 1, 2, 4);\n\n// Delete a task\ndeleteTask(2);\ndisplayTasks("After Deletion");\n\n// Final statistics\nconsole.log("\\n=== FINAL STATISTICS ===");\nconst finalStats = getTaskStats();\nconsole.log(finalStats);'
          }
        }
      },
      {
        id: 'js-6',
        title: 'Arrays and Objects',
        description: 'Work with complex data structures and learn array and object methods',
        duration: '60 min',
        difficulty: 'intermediate',
        estimatedTime: 60,
        content: {
          theory: 'Arrays and objects are fundamental data structures in JavaScript. Arrays store ordered collections of items with methods like push, pop, map, filter, reduce. Objects store key-value pairs and can represent complex entities. Understanding how to manipulate these structures, iterate through them, and use modern ES6+ features like destructuring and spread operator is crucial for effective JavaScript programming.',
          examples: [
            '// Arrays - Creation and Basic Operations\n\n// Creating arrays\nlet fruits = ["apple", "banana", "orange"];\nlet numbers = [1, 2, 3, 4, 5];\nlet mixed = [1, "hello", true, null, {name: "John"}];\nlet emptyArray = [];\n\n// Array properties and methods\nconsole.log("Array length:", fruits.length); // 3\nconsole.log("First fruit:", fruits[0]); // apple\nconsole.log("Last fruit:", fruits[fruits.length - 1]); // orange\n\n// Adding elements\nfruits.push("grape"); // Add to end\nfruits.unshift("strawberry"); // Add to beginning\nconsole.log("After adding:", fruits);\n\n// Removing elements\nlet lastFruit = fruits.pop(); // Remove from end\nlet firstFruit = fruits.shift(); // Remove from beginning\nconsole.log("Removed:", lastFruit, firstFruit);\nconsole.log("After removing:", fruits);\n\n// Array Methods\nlet scores = [85, 92, 78, 96, 88];\n\n// map - transform each element\nlet bonusScores = scores.map(score => score + 5);\nconsole.log("Bonus scores:", bonusScores);\n\n// filter - select elements that meet criteria\nlet highScores = scores.filter(score => score >= 90);\nconsole.log("High scores:", highScores);\n\n// reduce - combine all elements into single value\nlet totalScore = scores.reduce((sum, score) => sum + score, 0);\nlet averageScore = totalScore / scores.length;\nconsole.log("Total:", totalScore, "Average:", averageScore);\n\n// find - get first element that matches\nlet perfectScore = scores.find(score => score === 100);\nlet goodScore = scores.find(score => score >= 90);\nconsole.log("Perfect score:", perfectScore); // undefined\nconsole.log("First good score:", goodScore); // 92\n\n// some and every\nlet hasHighScore = scores.some(score => score >= 90);\nlet allPassing = scores.every(score => score >= 70);\nconsole.log("Has high score:", hasHighScore); // true\nconsole.log("All passing:", allPassing); // true\n\n// Objects - Creation and Manipulation\n\n// Creating objects\nlet person = {\n  name: "Alice",\n  age: 30,\n  city: "New York",\n  hobbies: ["reading", "swimming", "coding"],\n  address: {\n    street: "123 Main St",\n    zipCode: "10001"\n  }\n};\n\n// Accessing properties\nconsole.log("Name:", person.name); // Dot notation\nconsole.log("Age:", person["age"]); // Bracket notation\nconsole.log("First hobby:", person.hobbies[0]);\nconsole.log("Street:", person.address.street);\n\n// Adding and modifying properties\nperson.email = "alice@example.com"; // Add new property\nperson.age = 31; // Modify existing property\nperson["phone"] = "555-1234"; // Add using bracket notation\n\n// Deleting properties\ndelete person.phone;\n\n// Object methods\nlet calculator = {\n  value: 0,\n  add: function(num) {\n    this.value += num;\n    return this; // Return this for chaining\n  },\n  multiply: function(num) {\n    this.value *= num;\n    return this;\n  },\n  getValue: function() {\n    return this.value;\n  },\n  reset: function() {\n    this.value = 0;\n    return this;\n  }\n};\n\n// Method chaining\nlet result = calculator.add(5).multiply(3).add(2).getValue();\nconsole.log("Calculator result:", result); // 17\n\n// Object.keys, Object.values, Object.entries\nlet student = {\n  name: "Bob",\n  grade: "A",\n  subjects: ["Math", "Science", "English"]\n};\n\nconsole.log("Object keys:", Object.keys(student));\nconsole.log("Object values:", Object.values(student));\nconsole.log("Object entries:", Object.entries(student));\n\n// Iterating through objects\nfor (let key in student) {\n  console.log(`${key}: ${student[key]}`);\n}\n\n// ES6+ Features\n\n// Destructuring Arrays\nlet colors = ["red", "green", "blue", "yellow"];\nlet [primary, secondary, ...others] = colors;\nconsole.log("Primary:", primary); // red\nconsole.log("Secondary:", secondary); // green\nconsole.log("Others:", others); // ["blue", "yellow"]\n\n// Destructuring Objects\nlet user = {\n  username: "john_doe",\n  email: "john@example.com",\n  profile: {\n    firstName: "John",\n    lastName: "Doe"\n  }\n};\n\nlet {username, email, profile: {firstName, lastName}} = user;\nconsole.log("Username:", username);\nconsole.log("Full name:", firstName, lastName);\n\n// Spread Operator\nlet arr1 = [1, 2, 3];\nlet arr2 = [4, 5, 6];\nlet combined = [...arr1, ...arr2]; // [1, 2, 3, 4, 5, 6]\n\nlet originalObj = {a: 1, b: 2};\nlet extendedObj = {...originalObj, c: 3, d: 4};\nconsole.log("Extended object:", extendedObj);\n\n// Array of Objects - Common Pattern\nlet employees = [\n  {id: 1, name: "Alice", department: "Engineering", salary: 75000},\n  {id: 2, name: "Bob", department: "Marketing", salary: 65000},\n  {id: 3, name: "Carol", department: "Engineering", salary: 80000},\n  {id: 4, name: "David", department: "Sales", salary: 70000}\n];\n\n// Find employee by ID\nlet employee = employees.find(emp => emp.id === 3);\nconsole.log("Employee 3:", employee);\n\n// Get all engineers\nlet engineers = employees.filter(emp => emp.department === "Engineering");\nconsole.log("Engineers:", engineers);\n\n// Calculate total salary\nlet totalSalary = employees.reduce((total, emp) => total + emp.salary, 0);\nconsole.log("Total salary:", totalSalary);\n\n// Get all department names (unique)\nlet departments = [...new Set(employees.map(emp => emp.department))];\nconsole.log("Departments:", departments);\n\n// Sort by salary (descending)\nlet sortedBySalary = employees.sort((a, b) => b.salary - a.salary);\nconsole.log("Sorted by salary:", sortedBySalary.map(emp => `${emp.name}: $${emp.salary}`));'
          ],
          challenge: {
            title: 'Build a Student Grade Management System',
            description: 'Create a comprehensive system to manage student grades using arrays and objects.',
            starterCode: '// Student Grade Management System\n// Create a system to manage students and their grades\n\n// Sample data structure for a student:\n// {\n//   id: 1,\n//   name: "Alice Johnson",\n//   email: "alice@school.edu",\n//   grades: {\n//     math: [85, 92, 78, 96],\n//     science: [88, 91, 85],\n//     english: [92, 89, 94, 87]\n//   }\n// }\n\nlet students = [];\nlet nextStudentId = 1;\n\n// TODO: Implement the following functions:\n// 1. addStudent(name, email) - adds a new student\n// 2. addGrade(studentId, subject, grade) - adds a grade for a subject\n// 3. getStudentAverage(studentId, subject) - calculates average for a subject\n// 4. getOverallAverage(studentId) - calculates overall average\n// 5. getClassAverage(subject) - calculates class average for a subject\n// 6. getTopStudents(count) - returns top performing students\n// 7. getStudentReport(studentId) - generates a detailed report\n\n// Test your system\nconsole.log("=== STUDENT GRADE MANAGEMENT SYSTEM ===");\n\n// Add students and grades\n// addStudent("Alice Johnson", "alice@school.edu");\n// addStudent("Bob Smith", "bob@school.edu");\n// addStudent("Carol Davis", "carol@school.edu");\n\n// Add some grades\n// addGrade(1, "math", 85);\n// addGrade(1, "math", 92);\n// addGrade(1, "science", 88);\n\n// Generate reports\n// console.log("Alice\'s Math Average:", getStudentAverage(1, "math"));\n// console.log("Class Math Average:", getClassAverage("math"));\n// console.log("Top 2 Students:", getTopStudents(2));',
            solution: '// Student Grade Management System\n// Create a system to manage students and their grades\n\nlet students = [];\nlet nextStudentId = 1;\n\n// Function to add a new student\nfunction addStudent(name, email) {\n  // Validation\n  if (!name || name.trim() === "") {\n    console.log("‚ùå Error: Student name cannot be empty");\n    return null;\n  }\n  \n  if (!email || !email.includes("@")) {\n    console.log("‚ùå Error: Valid email address required");\n    return null;\n  }\n  \n  // Check if email already exists\n  const existingStudent = students.find(student => student.email === email);\n  if (existingStudent) {\n    console.log("‚ùå Error: Student with this email already exists");\n    return null;\n  }\n  \n  const newStudent = {\n    id: nextStudentId++,\n    name: name.trim(),\n    email: email.toLowerCase(),\n    grades: {},\n    enrolledDate: new Date().toISOString()\n  };\n  \n  students.push(newStudent);\n  console.log(`‚úÖ Student added: ${newStudent.name} (ID: ${newStudent.id})`);\n  return newStudent;\n}\n\n// Function to add a grade for a subject\nfunction addGrade(studentId, subject, grade) {\n  // Find student\n  const student = students.find(s => s.id === studentId);\n  if (!student) {\n    console.log(`‚ùå Error: Student with ID ${studentId} not found`);\n    return false;\n  }\n  \n  // Validate grade\n  if (typeof grade !== "number" || grade < 0 || grade > 100) {\n    console.log("‚ùå Error: Grade must be a number between 0 and 100");\n    return false;\n  }\n  \n  // Validate subject\n  if (!subject || subject.trim() === "") {\n    console.log("‚ùå Error: Subject cannot be empty");\n    return false;\n  }\n  \n  const subjectName = subject.toLowerCase().trim();\n  \n  // Initialize subject array if it doesn\'t exist\n  if (!student.grades[subjectName]) {\n    student.grades[subjectName] = [];\n  }\n  \n  student.grades[subjectName].push(grade);\n  console.log(`üìù Grade added: ${student.name} - ${subjectName}: ${grade}`);\n  return true;\n}\n\n// Function to calculate student average for a subject\nfunction getStudentAverage(studentId, subject) {\n  const student = students.find(s => s.id === studentId);\n  if (!student) {\n    console.log(`‚ùå Error: Student with ID ${studentId} not found`);\n    return null;\n  }\n  \n  const subjectName = subject.toLowerCase().trim();\n  const grades = student.grades[subjectName];\n  \n  if (!grades || grades.length === 0) {\n    console.log(`‚ùå No grades found for ${student.name} in ${subject}`);\n    return null;\n  }\n  \n  const average = grades.reduce((sum, grade) => sum + grade, 0) / grades.length;\n  return Math.round(average * 100) / 100; // Round to 2 decimal places\n}\n\n// Function to calculate overall average for a student\nfunction getOverallAverage(studentId) {\n  const student = students.find(s => s.id === studentId);\n  if (!student) {\n    console.log(`‚ùå Error: Student with ID ${studentId} not found`);\n    return null;\n  }\n  \n  const subjects = Object.keys(student.grades);\n  if (subjects.length === 0) {\n    console.log(`‚ùå No grades found for ${student.name}`);\n    return null;\n  }\n  \n  let totalPoints = 0;\n  let totalGrades = 0;\n  \n  subjects.forEach(subject => {\n    const grades = student.grades[subject];\n    totalPoints += grades.reduce((sum, grade) => sum + grade, 0);\n    totalGrades += grades.length;\n  });\n  \n  const average = totalPoints / totalGrades;\n  return Math.round(average * 100) / 100;\n}\n\n// Function to calculate class average for a subject\nfunction getClassAverage(subject) {\n  const subjectName = subject.toLowerCase().trim();\n  let totalPoints = 0;\n  let totalGrades = 0;\n  \n  students.forEach(student => {\n    const grades = student.grades[subjectName];\n    if (grades && grades.length > 0) {\n      totalPoints += grades.reduce((sum, grade) => sum + grade, 0);\n      totalGrades += grades.length;\n    }\n  });\n  \n  if (totalGrades === 0) {\n    console.log(`‚ùå No grades found for subject: ${subject}`);\n    return null;\n  }\n  \n  const average = totalPoints / totalGrades;\n  return Math.round(average * 100) / 100;\n}\n\n// Function to get top performing students\nfunction getTopStudents(count = 5) {\n  if (students.length === 0) {\n    console.log("‚ùå No students found");\n    return [];\n  }\n  \n  // Calculate overall average for each student\n  const studentsWithAverages = students\n    .map(student => ({\n      ...student,\n      overallAverage: getOverallAverage(student.id)\n    }))\n    .filter(student => student.overallAverage !== null) // Only students with grades\n    .sort((a, b) => b.overallAverage - a.overallAverage) // Sort by average (descending)\n    .slice(0, count); // Take top count\n  \n  return studentsWithAverages.map(student => ({\n    id: student.id,\n    name: student.name,\n    overallAverage: student.overallAverage\n  }));\n}\n\n// Function to generate a detailed student report\nfunction getStudentReport(studentId) {\n  const student = students.find(s => s.id === studentId);\n  if (!student) {\n    console.log(`‚ùå Error: Student with ID ${studentId} not found`);\n    return null;\n  }\n  \n  const subjects = Object.keys(student.grades);\n  if (subjects.length === 0) {\n    return {\n      student: {\n        id: student.id,\n        name: student.name,\n        email: student.email\n      },\n      message: "No grades recorded yet"\n    };\n  }\n  \n  const subjectReports = subjects.map(subject => {\n    const grades = student.grades[subject];\n    const average = getStudentAverage(studentId, subject);\n    const highest = Math.max(...grades);\n    const lowest = Math.min(...grades);\n    \n    return {\n      subject: subject,\n      grades: [...grades],\n      average: average,\n      highest: highest,\n      lowest: lowest,\n      gradeCount: grades.length\n    };\n  });\n  \n  const overallAverage = getOverallAverage(studentId);\n  \n  // Determine letter grade\n  let letterGrade;\n  if (overallAverage >= 90) letterGrade = "A";\n  else if (overallAverage >= 80) letterGrade = "B";\n  else if (overallAverage >= 70) letterGrade = "C";\n  else if (overallAverage >= 60) letterGrade = "D";\n  else letterGrade = "F";\n  \n  return {\n    student: {\n      id: student.id,\n      name: student.name,\n      email: student.email,\n      enrolledDate: student.enrolledDate\n    },\n    overallAverage: overallAverage,\n    letterGrade: letterGrade,\n    subjects: subjectReports,\n    totalGrades: subjectReports.reduce((total, subject) => total + subject.gradeCount, 0)\n  };\n}\n\n// Additional utility functions\n\n// Get all students with their basic info\nfunction getAllStudents() {\n  return students.map(student => ({\n    id: student.id,\n    name: student.name,\n    email: student.email,\n    subjectCount: Object.keys(student.grades).length,\n    totalGrades: Object.values(student.grades).reduce((total, grades) => total + grades.length, 0)\n  }));\n}\n\n// Get class statistics\nfunction getClassStatistics() {\n  if (students.length === 0) {\n    return { message: "No students enrolled" };\n  }\n  \n  // Get all unique subjects\n  const allSubjects = [...new Set(\n    students.flatMap(student => Object.keys(student.grades))\n  )];\n  \n  const subjectStats = allSubjects.map(subject => ({\n    subject: subject,\n    classAverage: getClassAverage(subject),\n    studentCount: students.filter(student => student.grades[subject] && student.grades[subject].length > 0).length\n  }));\n  \n  const studentsWithGrades = students.filter(student => Object.keys(student.grades).length > 0);\n  const overallAverages = studentsWithGrades.map(student => getOverallAverage(student.id)).filter(avg => avg !== null);\n  \n  const classOverallAverage = overallAverages.length > 0 \n    ? Math.round((overallAverages.reduce((sum, avg) => sum + avg, 0) / overallAverages.length) * 100) / 100\n    : null;\n  \n  return {\n    totalStudents: students.length,\n    studentsWithGrades: studentsWithGrades.length,\n    subjects: subjectStats,\n    classOverallAverage: classOverallAverage\n  };\n}\n\n// Function to display a formatted report\nfunction displayStudentReport(studentId) {\n  const report = getStudentReport(studentId);\n  if (!report) return;\n  \n  console.log(`\\n=== STUDENT REPORT: ${report.student.name.toUpperCase()} ===`);\n  console.log(`ID: ${report.student.id}`);\n  console.log(`Email: ${report.student.email}`);\n  \n  if (report.message) {\n    console.log(report.message);\n    return;\n  }\n  \n  console.log(`Overall Average: ${report.overallAverage}% (${report.letterGrade})`);\n  console.log(`Total Grades: ${report.totalGrades}`);\n  console.log(`\\nSubject Breakdown:`);\n  \n  report.subjects.forEach(subject => {\n    console.log(`  üìö ${subject.subject.toUpperCase()}:`);\n    console.log(`     Grades: [${subject.grades.join(\', \')}]`);\n    console.log(`     Average: ${subject.average}%`);\n    console.log(`     Range: ${subject.lowest} - ${subject.highest}`);\n  });\n}\n\n// Test the system\nconsole.log("=== STUDENT GRADE MANAGEMENT SYSTEM ===");\n\n// Add students\naddStudent("Alice Johnson", "alice@school.edu");\naddStudent("Bob Smith", "bob@school.edu");\naddStudent("Carol Davis", "carol@school.edu");\naddStudent("David Wilson", "david@school.edu");\naddStudent("", "invalid@school.edu"); // Should fail\naddStudent("Eve Brown", "alice@school.edu"); // Should fail - duplicate email\n\n// Add grades for Alice (ID: 1)\naddGrade(1, "Math", 85);\naddGrade(1, "Math", 92);\naddGrade(1, "Math", 78);\naddGrade(1, "Science", 88);\naddGrade(1, "Science", 91);\naddGrade(1, "English", 92);\naddGrade(1, "English", 89);\n\n// Add grades for Bob (ID: 2)\naddGrade(2, "Math", 76);\naddGrade(2, "Math", 82);\naddGrade(2, "Science", 85);\naddGrade(2, "Science", 79);\naddGrade(2, "English", 88);\n\n// Add grades for Carol (ID: 3)\naddGrade(3, "Math", 95);\naddGrade(3, "Math", 98);\naddGrade(3, "Math", 92);\naddGrade(3, "Science", 94);\naddGrade(3, "Science", 96);\naddGrade(3, "English", 90);\naddGrade(3, "English", 93);\naddGrade(3, "English", 87);\n\n// Add grades for David (ID: 4)\naddGrade(4, "Math", 88);\naddGrade(4, "Science", 92);\naddGrade(4, "English", 85);\n\n// Test invalid operations\naddGrade(999, "Math", 85); // Invalid student ID\naddGrade(1, "Math", 150); // Invalid grade\naddGrade(1, "", 85); // Invalid subject\n\n// Display individual student reports\ndisplayStudentReport(1);\ndisplayStudentReport(3);\n\n// Test average calculations\nconsole.log("\\n=== AVERAGE CALCULATIONS ===");\nconsole.log(`Alice\'s Math Average: ${getStudentAverage(1, "Math")}%`);\nconsole.log(`Alice\'s Overall Average: ${getOverallAverage(1)}%`);\nconsole.log(`Class Math Average: ${getClassAverage("Math")}%`);\nconsole.log(`Class Science Average: ${getClassAverage("Science")}%`);\n\n// Display top students\nconsole.log("\\n=== TOP STUDENTS ===");\nconst topStudents = getTopStudents(3);\ntopStudents.forEach((student, index) => {\n  console.log(`${index + 1}. ${student.name}: ${student.overallAverage}%`);\n});\n\n// Display class statistics\nconsole.log("\\n=== CLASS STATISTICS ===");\nconst classStats = getClassStatistics();\nconsole.log(`Total Students: ${classStats.totalStudents}`);\nconsole.log(`Students with Grades: ${classStats.studentsWithGrades}`);\nconsole.log(`Class Overall Average: ${classStats.classOverallAverage}%`);\nconsole.log("\\nSubject Statistics:");\nclassStats.subjects.forEach(subject => {\n  console.log(`  ${subject.subject}: ${subject.classAverage}% (${subject.studentCount} students)`);\n});\n\n// Display all students summary\nconsole.log("\\n=== ALL STUDENTS SUMMARY ===");\nconst allStudents = getAllStudents();\nallStudents.forEach(student => {\n  console.log(`${student.name} (ID: ${student.id}) - ${student.subjectCount} subjects, ${student.totalGrades} total grades`);\n});'
          }
        }
      }
    ]
  },
  // Continue with other modules (React, APIs, Next.js, SQL) following the same pattern...
  {
    id: 'react',
    title: 'React Development',
    description: 'Build dynamic UIs with React',
    icon: '‚öõÔ∏è',
    color: 'from-cyan-400 to-blue-500',
    totalLessons: 12,
    estimatedHours: 10,
    lessons: [
      {
        id: 'react-1',
        title: 'Introduction to React and JSX',
        description: 'Learn React fundamentals and JSX syntax for building user interfaces',
        duration: '45 min',
        difficulty: 'intermediate',
        estimatedTime: 45,
        content: {
          theory: 'React is a JavaScript library for building user interfaces, particularly web applications. It uses a component-based architecture where UIs are built from small, reusable pieces called components. JSX (JavaScript XML) is a syntax extension that allows you to write HTML-like code in JavaScript, making it easier to create and visualize component structures.',
          examples: [
            '// Basic React Component with JSX\nimport React from \'react\';\n\n// Functional Component\nfunction Welcome(props) {\n  return <h1>Hello, {props.name}!</h1>;\n}\n\n// Component with multiple elements\nfunction UserProfile() {\n  const user = {\n    name: "Alice Johnson",\n    age: 28,\n    email: "alice@example.com"\n  };\n  \n  return (\n    <div className="user-profile">\n      <h2>User Profile</h2>\n      <p>Name: {user.name}</p>\n      <p>Age: {user.age}</p>\n      <p>Email: {user.email}</p>\n    </div>\n  );\n}\n\n// JSX Expressions and Conditional Rendering\nfunction Greeting() {\n  const isLoggedIn = true;\n  const currentTime = new Date().getHours();\n  \n  let timeGreeting;\n  if (currentTime < 12) {\n    timeGreeting = "Good morning";\n  } else if (currentTime < 18) {\n    timeGreeting = "Good afternoon";\n  } else {\n    timeGreeting = "Good evening";\n  }\n  \n  return (\n    <div>\n      <h1>{timeGreeting}!</h1>\n      {isLoggedIn ? (\n        <p>Welcome back!</p>\n      ) : (\n        <p>Please log in.</p>\n      )}\n    </div>\n  );\n}\n\n// List Rendering\nfunction TodoList() {\n  const todos = [\n    { id: 1, text: "Learn React", completed: false },\n    { id: 2, text: "Build a project", completed: false },\n    { id: 3, text: "Deploy to production", completed: true }\n  ];\n  \n  return (\n    <ul>\n      {todos.map(todo => (\n        <li key={todo.id} className={todo.completed ? "completed" : ""}>\n          {todo.text}\n        </li>\n      ))}\n    </ul>\n  );\n}\n\n// Using Components Together\nfunction App() {\n  return (\n    <div className="app">\n      <Welcome name="React Developer" />\n      <UserProfile />\n      <Greeting />\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;'
          ],
          challenge: {
            title: 'Build a Personal Portfolio Component',
            description: 'Create a React component that displays your personal information using JSX.',
            starterCode: 'import React from \'react\';\n\n// Create a PersonalPortfolio component\nfunction PersonalPortfolio() {\n  // Add your personal information here\n  const personalInfo = {\n    // Add your details\n  };\n  \n  const skills = [\n    // Add your skills\n  ];\n  \n  const projects = [\n    // Add your projects\n  ];\n  \n  return (\n    <div>\n      {/* Build your portfolio JSX here */}\n    </div>\n  );\n}\n\nexport default PersonalPortfolio;',
            solution: 'import React from \'react\';\n\n// Create a PersonalPortfolio component\nfunction PersonalPortfolio() {\n  // Personal information\n  const personalInfo = {\n    name: "Sarah Developer",\n    title: "Frontend Developer",\n    email: "sarah@example.com",\n    location: "San Francisco, CA",\n    bio: "Passionate frontend developer with expertise in React and modern web technologies."\n  };\n  \n  const skills = [\n    "JavaScript",\n    "React",\n    "HTML5",\n    "CSS3",\n    "Node.js",\n    "Git"\n  ];\n  \n  const projects = [\n    {\n      id: 1,\n      name: "E-commerce Website",\n      description: "A full-stack e-commerce platform built with React and Node.js",\n      status: "Completed"\n    },\n    {\n      id: 2,\n      name: "Weather App",\n      description: "A responsive weather application using React and weather API",\n      status: "In Progress"\n    },\n    {\n      id: 3,\n      name: "Task Manager",\n      description: "A productivity app for managing daily tasks and goals",\n      status: "Planning"\n    }\n  ];\n  \n  return (\n    <div className="portfolio">\n      {/* Header Section */}\n      <header className="portfolio-header">\n        <h1>{personalInfo.name}</h1>\n        <h2>{personalInfo.title}</h2>\n        <p className="bio">{personalInfo.bio}</p>\n        <div className="contact-info">\n          <p>üìß {personalInfo.email}</p>\n          <p>üìç {personalInfo.location}</p>\n        </div>\n      </header>\n      \n      {/* Skills Section */}\n      <section className="skills-section">\n        <h3>Skills</h3>\n        <div className="skills-grid">\n          {skills.map((skill, index) => (\n            <span key={index} className="skill-tag">\n              {skill}\n            </span>\n          ))}\n        </div>\n      </section>\n      \n      {/* Projects Section */}\n      <section className="projects-section">\n        <h3>Projects</h3>\n        <div className="projects-list">\n          {projects.map(project => (\n            <div key={project.id} className="project-card">\n              <h4>{project.name}</h4>\n              <p>{project.description}</p>\n              <span className={`status ${project.status.toLowerCase().replace(\' \', \'-\')}`}>\n                {project.status}\n              </span>\n            </div>\n          ))}\n        </div>\n      </section>\n      \n      {/* Footer */}\n      <footer className="portfolio-footer">\n        <p>¬© 2024 {personalInfo.name}. Built with React ‚öõÔ∏è</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default PersonalPortfolio;'
          }
        }
      }
    ]
  },
  {
    id: 'apis',
    title: 'APIs & Data',
    description: 'Connect to APIs and handle data',
    icon: 'üîó',
    color: 'from-green-400 to-teal-500',
    totalLessons: 10,
    estimatedHours: 6,
    lessons: [
      {
        id: 'api-1',
        title: 'What is an API?',
        description: 'Understand APIs, how they work, and their role in modern web development',
        duration: '30 min',
        difficulty: 'beginner',
        estimatedTime: 30,
        content: {
          theory: 'API (Application Programming Interface) is a set of rules and protocols that allows different software applications to communicate with each other. APIs define how requests and responses should be formatted, what data can be accessed, and what operations can be performed. They act as intermediaries between different systems, enabling data exchange and functionality sharing.',
          examples: [
            '// What is an API?\n// An API is like a waiter in a restaurant:\n// - You (client) make a request from the menu\n// - The waiter (API) takes your order to the kitchen (server)\n// - The kitchen prepares your food (processes the request)\n// - The waiter brings back your meal (response)\n\n// Common API Examples:\n\n// 1. Weather API - Get current weather data\n// Request: GET https://api.weather.com/current?city=NewYork\n// Response: { "temperature": 72, "condition": "sunny", "humidity": 45 }\n\n// 2. Social Media API - Post a status update\n// Request: POST https://api.social.com/posts\n// Body: { "message": "Hello World!", "visibility": "public" }\n// Response: { "id": 12345, "status": "posted", "timestamp": "2024-01-15T10:30:00Z" }\n\n// 3. E-commerce API - Get product information\n// Request: GET https://api.store.com/products/123\n// Response: {\n//   "id": 123,\n//   "name": "Wireless Headphones",\n//   "price": 99.99,\n//   "inStock": true,\n//   "description": "High-quality wireless headphones"\n// }\n\n// API Components:\n\n// 1. Endpoint - The URL where the API can be accessed\nconst apiEndpoint = "https://jsonplaceholder.typicode.com/users";\n\n// 2. HTTP Methods - Different types of operations\nconst methods = {\n  GET: "Retrieve data",\n  POST: "Create new data", \n  PUT: "Update existing data",\n  DELETE: "Remove data",\n  PATCH: "Partially update data"\n};\n\n// 3. Headers - Additional information about the request\nconst headers = {\n  "Content-Type": "application/json",\n  "Authorization": "Bearer your-api-key",\n  "Accept": "application/json"\n};\n\n// 4. Request Body - Data sent with POST/PUT requests\nconst requestBody = {\n  name: "John Doe",\n  email: "john@example.com",\n  age: 30\n};\n\n// 5. Response - Data returned by the API\nconst apiResponse = {\n  status: 200,\n  statusText: "OK",\n  data: {\n    id: 1,\n    name: "John Doe",\n    email: "john@example.com",\n    created: "2024-01-15T10:30:00Z"\n  }\n};\n\n// Types of APIs:\n\n// 1. REST APIs (Most Common)\n// - Use standard HTTP methods\n// - Stateless communication\n// - Resource-based URLs\n\n// 2. GraphQL APIs\n// - Query language for APIs\n// - Request exactly the data you need\n// - Single endpoint for all operations\n\n// 3. WebSocket APIs\n// - Real-time, bidirectional communication\n// - Persistent connection\n// - Great for chat apps, live updates\n\n// API Response Formats:\n\n// JSON (Most Common)\nconst jsonResponse = {\n  "users": [\n    {"id": 1, "name": "Alice"},\n    {"id": 2, "name": "Bob"}\n  ],\n  "total": 2\n};\n\n// XML (Less Common)\nconst xmlResponse = `\n<?xml version="1.0"?>\n<users>\n  <user id="1">\n    <name>Alice</name>\n  </user>\n  <user id="2">\n    <name>Bob</name>\n  </user>\n</users>\n`;\n\n// HTTP Status Codes:\nconst statusCodes = {\n  200: "OK - Request successful",\n  201: "Created - New resource created",\n  400: "Bad Request - Invalid request",\n  401: "Unauthorized - Authentication required",\n  403: "Forbidden - Access denied",\n  404: "Not Found - Resource doesn\'t exist",\n  500: "Internal Server Error - Server error"\n};\n\nconsole.log("API Basics Overview:");\nconsole.log("Endpoint:", apiEndpoint);\nconsole.log("Methods:", methods);\nconsole.log("Status Codes:", statusCodes);'
          ],
          challenge: {
            title: 'Design Your First API',
            description: 'Plan and design a simple API for a library management system.',
            starterCode: '// Library Management API Design\n// Design endpoints for managing books, users, and borrowing\n\n// TODO: Design the following API endpoints:\n// 1. Get all books\n// 2. Get a specific book by ID\n// 3. Add a new book\n// 4. Update book information\n// 5. Delete a book\n// 6. Get all users\n// 7. Register a new user\n// 8. Borrow a book\n// 9. Return a book\n// 10. Get borrowing history\n\n// For each endpoint, specify:\n// - HTTP Method (GET, POST, PUT, DELETE)\n// - URL/Endpoint\n// - Request body (if needed)\n// - Expected response\n// - Status codes\n\nconst libraryAPI = {\n  // Add your API design here\n};\n\nconsole.log("Library API Design:", libraryAPI);',
            solution: '// Library Management API Design\n// Design endpoints for managing books, users, and borrowing\n\nconst libraryAPI = {\n  baseURL: "https://api.library.com/v1",\n  \n  // Book Management Endpoints\n  books: {\n    // 1. Get all books\n    getAllBooks: {\n      method: "GET",\n      endpoint: "/books",\n      description: "Retrieve all books in the library",\n      queryParameters: {\n        page: "Page number (optional)",\n        limit: "Number of books per page (optional)",\n        category: "Filter by category (optional)",\n        available: "Filter by availability (optional)"\n      },\n      response: {\n        status: 200,\n        body: {\n          books: [\n            {\n              id: 1,\n              title: "The Great Gatsby",\n              author: "F. Scott Fitzgerald",\n              isbn: "978-0-7432-7356-5",\n              category: "Fiction",\n              available: true,\n              publishedYear: 1925\n            }\n          ],\n          totalBooks: 150,\n          currentPage: 1,\n          totalPages: 15\n        }\n      }\n    },\n    \n    // 2. Get a specific book by ID\n    getBookById: {\n      method: "GET",\n      endpoint: "/books/{id}",\n      description: "Retrieve a specific book by its ID",\n      pathParameters: {\n        id: "Book ID (required)"\n      },\n      responses: {\n        success: {\n          status: 200,\n          body: {\n            id: 1,\n            title: "The Great Gatsby",\n            author: "F. Scott Fitzgerald",\n            isbn: "978-0-7432-7356-5",\n            category: "Fiction",\n            available: true,\n            publishedYear: 1925,\n            description: "A classic American novel...",\n            borrowHistory: []\n          }\n        },\n        notFound: {\n          status: 404,\n          body: {\n            error: "Book not found",\n            message: "No book exists with the provided ID"\n          }\n        }\n      }\n    },\n    \n    // 3. Add a new book\n    addBook: {\n      method: "POST",\n      endpoint: "/books",\n      description: "Add a new book to the library",\n      headers: {\n        "Content-Type": "application/json",\n        "Authorization": "Bearer {admin-token}"\n      },\n      requestBody: {\n        title: "Book title (required)",\n        author: "Author name (required)",\n        isbn: "ISBN number (required)",\n        category: "Book category (required)",\n        publishedYear: "Publication year (optional)",\n        description: "Book description (optional)",\n        copies: "Number of copies (default: 1)"\n      },\n      responses: {\n        created: {\n          status: 201,\n          body: {\n            id: 151,\n            title: "New Book Title",\n            author: "Author Name",\n            message: "Book successfully added to library"\n          }\n        },\n        badRequest: {\n          status: 400,\n          body: {\n            error: "Validation error",\n            details: ["Title is required", "Author is required"]\n          }\n        },\n        unauthorized: {\n          status: 401,\n          body: {\n            error: "Unauthorized",\n            message: "Admin access required"\n          }\n        }\n      }\n    },\n    \n    // 4. Update book information\n    updateBook: {\n      method: "PUT",\n      endpoint: "/books/{id}",\n      description: "Update existing book information",\n      pathParameters: {\n        id: "Book ID (required)"\n      },\n      headers: {\n        "Content-Type": "application/json",\n        "Authorization": "Bearer {admin-token}"\n      },\n      requestBody: {\n        title: "Updated title (optional)",\n        author: "Updated author (optional)",\n        category: "Updated category (optional)",\n        description: "Updated description (optional)"\n      },\n      responses: {\n        success: {\n          status: 200,\n          body: {\n            id: 1,\n            title: "Updated Title",\n            message: "Book successfully updated"\n          }\n        },\n        notFound: {\n          status: 404,\n          body: {\n            error: "Book not found"\n          }\n        }\n      }\n    },\n    \n    // 5. Delete a book\n    deleteBook: {\n      method: "DELETE",\n      endpoint: "/books/{id}",\n      description: "Remove a book from the library",\n      pathParameters: {\n        id: "Book ID (required)"\n      },\n      headers: {\n        "Authorization": "Bearer {admin-token}"\n      },\n      responses: {\n        success: {\n          status: 200,\n          body: {\n            message: "Book successfully deleted"\n          }\n        },\n        conflict: {\n          status: 409,\n          body: {\n            error: "Cannot delete book",\n            message: "Book is currently borrowed"\n          }\n        }\n      }\n    }\n  },\n  \n  // User Management Endpoints\n  users: {\n    // 6. Get all users\n    getAllUsers: {\n      method: "GET",\n      endpoint: "/users",\n      description: "Retrieve all registered users",\n      headers: {\n        "Authorization": "Bearer {admin-token}"\n      },\n      queryParameters: {\n        page: "Page number (optional)",\n        limit: "Users per page (optional)"\n      },\n      response: {\n        status: 200,\n        body: {\n          users: [\n            {\n              id: 1,\n              name: "John Doe",\n              email: "john@example.com",\n              membershipType: "standard",\n              joinDate: "2024-01-15",\n              booksCurrentlyBorrowed: 2\n            }\n          ],\n          totalUsers: 50\n        }\n      }\n    },\n    \n    // 7. Register a new user\n    registerUser: {\n      method: "POST",\n      endpoint: "/users/register",\n      description: "Register a new library user",\n      headers: {\n        "Content-Type": "application/json"\n      },\n      requestBody: {\n        name: "Full name (required)",\n        email: "Email address (required)",\n        password: "Password (required)",\n        phone: "Phone number (optional)",\n        address: "Address (optional)"\n      },\n      responses: {\n        created: {\n          status: 201,\n          body: {\n            id: 51,\n            name: "John Doe",\n            email: "john@example.com",\n            membershipType: "standard",\n            message: "User successfully registered"\n          }\n        },\n        conflict: {\n          status: 409,\n          body: {\n            error: "Email already exists",\n            message: "A user with this email is already registered"\n          }\n        }\n      }\n    }\n  },\n  \n  // Borrowing Management Endpoints\n  borrowing: {\n    // 8. Borrow a book\n    borrowBook: {\n      method: "POST",\n      endpoint: "/borrowing/borrow",\n      description: "Borrow a book from the library",\n      headers: {\n        "Content-Type": "application/json",\n        "Authorization": "Bearer {user-token}"\n      },\n      requestBody: {\n        bookId: "ID of the book to borrow (required)",\n        userId: "ID of the user borrowing (required)"\n      },\n      responses: {\n        success: {\n          status: 201,\n          body: {\n            borrowId: 1001,\n            bookId: 1,\n            userId: 51,\n            borrowDate: "2024-01-15",\n            dueDate: "2024-02-15",\n            message: "Book successfully borrowed"\n          }\n        },\n        unavailable: {\n          status: 409,\n          body: {\n            error: "Book unavailable",\n            message: "This book is currently borrowed by another user"\n          }\n        },\n        limitExceeded: {\n          status: 400,\n          body: {\n            error: "Borrowing limit exceeded",\n            message: "User has reached maximum borrowing limit"\n          }\n        }\n      }\n    },\n    \n    // 9. Return a book\n    returnBook: {\n      method: "POST",\n      endpoint: "/borrowing/return",\n      description: "Return a borrowed book",\n      headers: {\n        "Content-Type": "application/json",\n        "Authorization": "Bearer {user-token}"\n      },\n      requestBody: {\n        borrowId: "ID of the borrowing record (required)"\n      },\n      responses: {\n        success: {\n          status: 200,\n          body: {\n            borrowId: 1001,\n            returnDate: "2024-01-25",\n            lateFee: 0,\n            message: "Book successfully returned"\n          }\n        },\n        lateFee: {\n          status: 200,\n          body: {\n            borrowId: 1001,\n            returnDate: "2024-02-20",\n            lateFee: 5.00,\n            message: "Book returned with late fee"\n          }\n        }\n      }\n    },\n    \n    // 10. Get borrowing history\n    getBorrowingHistory: {\n      method: "GET",\n      endpoint: "/borrowing/history/{userId}",\n      description: "Get borrowing history for a user",\n      pathParameters: {\n        userId: "User ID (required)"\n      },\n      headers: {\n        "Authorization": "Bearer {user-token}"\n      },\n      queryParameters: {\n        status: "Filter by status: active, returned, overdue (optional)",\n        page: "Page number (optional)"\n      },\n      response: {\n        status: 200,\n        body: {\n          userId: 51,\n          borrowingHistory: [\n            {\n              borrowId: 1001,\n              bookId: 1,\n              bookTitle: "The Great Gatsby",\n              borrowDate: "2024-01-15",\n              dueDate: "2024-02-15",\n              returnDate: "2024-01-25",\n              status: "returned",\n              lateFee: 0\n            }\n          ],\n          totalRecords: 5,\n          currentlyBorrowed: 2\n        }\n      }\n    }\n  },\n  \n  // Authentication Endpoints\n  auth: {\n    login: {\n      method: "POST",\n      endpoint: "/auth/login",\n      description: "User login",\n      requestBody: {\n        email: "User email (required)",\n        password: "User password (required)"\n      },\n      responses: {\n        success: {\n          status: 200,\n          body: {\n            token: "jwt-token-here",\n            user: {\n              id: 51,\n              name: "John Doe",\n              email: "john@example.com",\n              role: "user"\n            },\n            expiresIn: "24h"\n          }\n        },\n        unauthorized: {\n          status: 401,\n          body: {\n            error: "Invalid credentials"\n          }\n        }\n      }\n    }\n  }\n};\n\n// API Usage Examples\nconst apiExamples = {\n  // Get all books\n  getAllBooks: {\n    url: `${libraryAPI.baseURL}/books?page=1&limit=10`,\n    method: "GET"\n  },\n  \n  // Add a new book\n  addBook: {\n    url: `${libraryAPI.baseURL}/books`,\n    method: "POST",\n    headers: {\n      "Content-Type": "application/json",\n      "Authorization": "Bearer admin-token"\n    },\n    body: JSON.stringify({\n      title: "1984",\n      author: "George Orwell",\n      isbn: "978-0-452-28423-4",\n      category: "Dystopian Fiction",\n      publishedYear: 1949\n    })\n  },\n  \n  // Borrow a book\n  borrowBook: {\n    url: `${libraryAPI.baseURL}/borrowing/borrow`,\n    method: "POST",\n    headers: {\n      "Content-Type": "application/json",\n      "Authorization": "Bearer user-token"\n    },\n    body: JSON.stringify({\n      bookId: 1,\n      userId: 51\n    })\n  }\n};\n\nconsole.log("=== LIBRARY API DESIGN ===");\nconsole.log("Base URL:", libraryAPI.baseURL);\nconsole.log("\\nBook Endpoints:");\nconsole.log("- GET /books - Get all books");\nconsole.log("- GET /books/{id} - Get specific book");\nconsole.log("- POST /books - Add new book");\nconsole.log("- PUT /books/{id} - Update book");\nconsole.log("- DELETE /books/{id} - Delete book");\n\nconsole.log("\\nUser Endpoints:");\nconsole.log("- GET /users - Get all users");\nconsole.log("- POST /users/register - Register user");\n\nconsole.log("\\nBorrowing Endpoints:");\nconsole.log("- POST /borrowing/borrow - Borrow book");\nconsole.log("- POST /borrowing/return - Return book");\nconsole.log("- GET /borrowing/history/{userId} - Get history");\n\nconsole.log("\\nAuthentication:");\nconsole.log("- POST /auth/login - User login");\n\nconsole.log("\\nAPI Design Complete! ‚úÖ");'
          }
        }
      }
    ]
  },
  {
    id: 'nextjs',
    title: 'Next.js Framework',
    description: 'Build full-stack applications',
    icon: 'üöÄ',
    color: 'from-gray-600 to-gray-800',
    totalLessons: 10,
    estimatedHours: 8,
    lessons: [
      {
        id: 'nextjs-1',
        title: 'Introduction to Next.js',
        description: 'Learn what Next.js is and why it\'s powerful for React applications',
        duration: '35 min',
        difficulty: 'intermediate',
        estimatedTime: 35,
        content: {
          theory: 'Next.js is a React framework that provides additional features like server-side rendering, static site generation, API routes, and automatic code splitting. It simplifies React development by providing conventions and optimizations out of the box, making it easier to build production-ready applications with better performance and SEO.',
          examples: [
            '// What is Next.js?\n// Next.js is a React framework that adds powerful features:\n\n// 1. File-based Routing\n// Instead of configuring routes manually, Next.js uses the file system\n// pages/index.js ‚Üí / (home page)\n// pages/about.js ‚Üí /about\n// pages/blog/[slug].js ‚Üí /blog/my-post (dynamic routes)\n\n// 2. Server-Side Rendering (SSR)\n// Pages are rendered on the server for better SEO and performance\nexport async function getServerSideProps(context) {\n  // This runs on the server for each request\n  const data = await fetch(\'https://api.example.com/data\');\n  const posts = await data.json();\n  \n  return {\n    props: {\n      posts\n    }\n  };\n}\n\nfunction BlogPage({ posts }) {\n  return (\n    <div>\n      <h1>Blog Posts</h1>\n      {posts.map(post => (\n        <article key={post.id}>\n          <h2>{post.title}</h2>\n          <p>{post.excerpt}</p>\n        </article>\n      ))}\n    </div>\n  );\n}\n\n// 3. Static Site Generation (SSG)\n// Generate static HTML at build time for better performance\nexport async function getStaticProps() {\n  // This runs at build time\n  const posts = await fetchPosts();\n  \n  return {\n    props: {\n      posts\n    },\n    revalidate: 3600 // Regenerate every hour\n  };\n}\n\n// 4. API Routes\n// Create backend API endpoints in the same project\n// pages/api/users.js\nexport default function handler(req, res) {\n  if (req.method === \'GET\') {\n    // Handle GET request\n    res.status(200).json({ users: [] });\n  } else if (req.method === \'POST\') {\n    // Handle POST request\n    const { name, email } = req.body;\n    // Save user to database\n    res.status(201).json({ message: \'User created\' });\n  }\n}\n\n// 5. Automatic Code Splitting\n// Next.js automatically splits your code for better performance\nimport dynamic from \'next/dynamic\';\n\n// Lazy load components\nconst DynamicComponent = dynamic(() => import(\'../components/HeavyComponent\'), {\n  loading: () => <p>Loading...</p>\n});\n\nfunction MyPage() {\n  return (\n    <div>\n      <h1>My Page</h1>\n      <DynamicComponent />\n    </div>\n  );\n}\n\n// 6. Built-in CSS Support\n// Next.js supports CSS Modules, Sass, and CSS-in-JS out of the box\n\n// CSS Modules (styles.module.css)\n// .container {\n//   max-width: 1200px;\n//   margin: 0 auto;\n// }\n\nimport styles from \'./styles.module.css\';\n\nfunction Component() {\n  return <div className={styles.container}>Content</div>;\n}\n\n// 7. Image Optimization\n// Next.js provides an optimized Image component\nimport Image from \'next/image\';\n\nfunction Gallery() {\n  return (\n    <div>\n      <Image\n        src="/hero-image.jpg"\n        alt="Hero Image"\n        width={800}\n        height={400}\n        priority // Load this image first\n      />\n    </div>\n  );\n}\n\n// 8. TypeScript Support\n// Next.js has built-in TypeScript support\n// Just create .tsx files and Next.js will configure TypeScript\n\ninterface Props {\n  title: string;\n  posts: Post[];\n}\n\ninterface Post {\n  id: number;\n  title: string;\n  content: string;\n}\n\nconst BlogPage: React.FC<Props> = ({ title, posts }) => {\n  return (\n    <div>\n      <h1>{title}</h1>\n      {posts.map(post => (\n        <article key={post.id}>\n          <h2>{post.title}</h2>\n          <p>{post.content}</p>\n        </article>\n      ))}\n    </div>\n  );\n};\n\n// 9. Environment Variables\n// Next.js supports environment variables out of the box\n// .env.local\n// DATABASE_URL=your-database-url\n// API_KEY=your-api-key\n\n// Access in your code\nconst dbUrl = process.env.DATABASE_URL;\nconst apiKey = process.env.API_KEY;\n\n// 10. Deployment\n// Next.js is optimized for deployment on Vercel\n// But can be deployed anywhere that supports Node.js\n\n// Key Benefits of Next.js:\nconst nextjsBenefits = {\n  performance: {\n    automaticCodeSplitting: "Only load what\'s needed",\n    imageOptimization: "Automatic image optimization",\n    staticGeneration: "Pre-render pages for speed"\n  },\n  seo: {\n    serverSideRendering: "Better search engine indexing",\n    metaTags: "Easy meta tag management",\n    structuredData: "Support for structured data"\n  },\n  developerExperience: {\n    fileBasedRouting: "No route configuration needed",\n    hotReloading: "Instant feedback during development",\n    errorReporting: "Detailed error messages"\n  },\n  production: {\n    buildOptimization: "Optimized production builds",\n    analytics: "Built-in analytics support",\n    deployment: "Easy deployment to Vercel"\n  }\n};\n\n// When to use Next.js:\nconst useCases = {\n  perfectFor: [\n    "E-commerce websites",\n    "Marketing websites", \n    "Blogs and content sites",\n    "Dashboards and admin panels",\n    "Portfolio websites"\n  ],\n  notIdealFor: [\n    "Simple single-page apps",\n    "Mobile apps (use React Native)",\n    "Desktop apps (use Electron)"\n  ]\n};\n\nconsole.log("Next.js Benefits:", nextjsBenefits);\nconsole.log("Use Cases:", useCases);'
          ],
          challenge: {
            title: 'Plan a Next.js Application',
            description: 'Design the structure and features for a Next.js blog application.',
            starterCode: '// Next.js Blog Application Planning\n// Plan the structure, pages, and features for a blog built with Next.js\n\n// TODO: Plan the following:\n// 1. File structure and pages\n// 2. Data fetching strategy (SSG, SSR, or CSR)\n// 3. API routes needed\n// 4. Components structure\n// 5. Styling approach\n// 6. SEO considerations\n\nconst blogAppPlan = {\n  // Add your planning here\n};\n\nconsole.log("Blog App Plan:", blogAppPlan);',
            solution: '// Next.js Blog Application Planning\n// Plan the structure, pages, and features for a blog built with Next.js\n\nconst blogAppPlan = {\n  // 1. Project Structure\n  fileStructure: {\n    pages: {\n      "index.js": "Home page with recent posts (SSG)",\n      "about.js": "About page (SSG)",\n      "contact.js": "Contact page with form (SSR)",\n      "blog/index.js": "Blog listing page (SSG with ISR)",\n      "blog/[slug].js": "Individual blog post (SSG)",\n      "blog/category/[category].js": "Posts by category (SSG)",\n      "blog/tag/[tag].js": "Posts by tag (SSG)",\n      "admin/index.js": "Admin dashboard (SSR)",\n      "admin/posts/new.js": "Create new post (SSR)",\n      "admin/posts/edit/[id].js": "Edit post (SSR)",\n      "_app.js": "Custom App component",\n      "_document.js": "Custom Document component",\n      "404.js": "Custom 404 page",\n      "500.js": "Custom error page"\n    },\n    api: {\n      "api/posts/index.js": "GET all posts, POST new post",\n      "api/posts/[id].js": "GET, PUT, DELETE specific post",\n      "api/comments/[postId].js": "GET, POST comments for post",\n      "api/auth/login.js": "User authentication",\n      "api/contact.js": "Handle contact form submissions",\n      "api/newsletter.js": "Newsletter subscription",\n      "api/search.js": "Search posts"\n    },\n    components: {\n      layout: {\n        "Header.js": "Site header with navigation",\n        "Footer.js": "Site footer",\n        "Layout.js": "Main layout wrapper",\n        "Sidebar.js": "Blog sidebar with widgets"\n      },\n      blog: {\n        "PostCard.js": "Blog post preview card",\n        "PostContent.js": "Full post content display",\n        "PostMeta.js": "Post metadata (date, author, tags)",\n        "CommentSection.js": "Comments display and form",\n        "RelatedPosts.js": "Related posts suggestions",\n        "ShareButtons.js": "Social sharing buttons"\n      },\n      ui: {\n        "Button.js": "Reusable button component",\n        "Input.js": "Form input component",\n        "Modal.js": "Modal dialog component",\n        "LoadingSpinner.js": "Loading indicator",\n        "Pagination.js": "Pagination component"\n      },\n      seo: {\n        "SEOHead.js": "SEO meta tags component",\n        "StructuredData.js": "JSON-LD structured data"\n      }\n    },\n    styles: {\n      "globals.css": "Global styles",\n      "components/": "Component-specific CSS modules",\n      "utils.css": "Utility classes"\n    },\n    public: {\n      "images/": "Static images",\n      "icons/": "Icon files",\n      "robots.txt": "Search engine instructions",\n      "sitemap.xml": "Site map for SEO"\n    }\n  },\n  \n  // 2. Data Fetching Strategy\n  dataFetching: {\n    homePage: {\n      method: "getStaticProps",\n      reason: "Static content, good for SEO and performance",\n      revalidate: 3600, // Revalidate every hour\n      data: ["recent posts", "featured posts", "categories"]\n    },\n    blogListing: {\n      method: "getStaticProps with ISR",\n      reason: "Frequently updated content",\n      revalidate: 1800, // Revalidate every 30 minutes\n      data: ["paginated posts", "categories", "tags"]\n    },\n    blogPost: {\n      method: "getStaticProps + getStaticPaths",\n      reason: "SEO-friendly, fast loading",\n      fallback: "blocking", // Generate new posts on demand\n      data: ["post content", "comments", "related posts"]\n    },\n    adminPages: {\n      method: "getServerSideProps",\n      reason: "Dynamic, authenticated content",\n      data: ["user session", "real-time data"]\n    },\n    contactPage: {\n      method: "getServerSideProps",\n      reason: "Form handling, CSRF protection",\n      data: ["contact form", "user session"]\n    }\n  },\n  \n  // 3. API Routes Design\n  apiRoutes: {\n    posts: {\n      "GET /api/posts": {\n        description: "Get all posts with pagination",\n        parameters: ["page", "limit", "category", "tag"],\n        response: "{ posts: [], totalPages: number, currentPage: number }"\n      },\n      "POST /api/posts": {\n        description: "Create new post (admin only)",\n        authentication: "required",\n        body: "{ title, content, excerpt, tags, category, published }"\n      },\n      "GET /api/posts/[id]": {\n        description: "Get specific post",\n        response: "{ post: {}, comments: [] }"\n      },\n      "PUT /api/posts/[id]": {\n        description: "Update post (admin only)",\n        authentication: "required"\n      },\n      "DELETE /api/posts/[id]": {\n        description: "Delete post (admin only)",\n        authentication: "required"\n      }\n    },\n    comments: {\n      "GET /api/comments/[postId]": {\n        description: "Get comments for post",\n        response: "{ comments: [] }"\n      },\n      "POST /api/comments/[postId]": {\n        description: "Add comment to post",\n        body: "{ name, email, content }",\n        validation: "spam protection, content moderation"\n      }\n    },\n    utilities: {\n      "POST /api/contact": {\n        description: "Handle contact form",\n        body: "{ name, email, message }",\n        action: "send email, save to database"\n      },\n      "POST /api/newsletter": {\n        description: "Newsletter subscription",\n        body: "{ email }"\n      },\n      "GET /api/search": {\n        description: "Search posts",\n        parameters: ["q", "category"],\n        response: "{ results: [], totalResults: number }"\n      }\n    }\n  },\n  \n  // 4. Component Architecture\n  componentArchitecture: {\n    layoutComponents: {\n      purpose: "Consistent site structure",\n      components: ["Header", "Footer", "Layout", "Sidebar"],\n      features: ["responsive navigation", "dark mode toggle", "search bar"]\n    },\n    blogComponents: {\n      purpose: "Blog-specific functionality",\n      components: ["PostCard", "PostContent", "CommentSection"],\n      features: ["social sharing", "reading time", "related posts"]\n    },\n    uiComponents: {\n      purpose: "Reusable UI elements",\n      components: ["Button", "Input", "Modal", "Pagination"],\n      features: ["consistent styling", "accessibility", "responsive design"]\n    },\n    seoComponents: {\n      purpose: "Search engine optimization",\n      components: ["SEOHead", "StructuredData"],\n      features: ["meta tags", "Open Graph", "Twitter Cards", "JSON-LD"]\n    }\n  },\n  \n  // 5. Styling Strategy\n  styling: {\n    approach: "CSS Modules + Tailwind CSS",\n    reasoning: {\n      cssModules: "Component-scoped styles, no conflicts",\n      tailwind: "Utility-first, rapid development, consistent design"\n    },\n    structure: {\n      global: "globals.css for reset and base styles",\n      components: "Component.module.css for component-specific styles",\n      utilities: "Tailwind utilities for layout and spacing"\n    },\n    theme: {\n      colors: {\n        primary: "#3B82F6", // Blue\n        secondary: "#10B981", // Green\n        accent: "#F59E0B", // Amber\n        neutral: "#6B7280" // Gray\n      },\n      typography: {\n        headings: "Inter font family",\n        body: "System font stack",\n        code: "JetBrains Mono"\n      },\n      spacing: "8px base unit system",\n      breakpoints: "Tailwind default breakpoints"\n    },\n    darkMode: {\n      implementation: "CSS custom properties + Tailwind dark mode",\n      toggle: "User preference stored in localStorage"\n    }\n  },\n  \n  // 6. SEO Strategy\n  seoStrategy: {\n    metaTags: {\n      implementation: "SEOHead component with Next.js Head",\n      tags: ["title", "description", "keywords", "canonical"],\n      openGraph: ["og:title", "og:description", "og:image", "og:url"],\n      twitter: ["twitter:card", "twitter:title", "twitter:description"]\n    },\n    structuredData: {\n      types: ["Article", "BlogPosting", "Organization", "WebSite"],\n      implementation: "JSON-LD in StructuredData component"\n    },\n    sitemap: {\n      generation: "Automatic sitemap generation",\n      includes: ["all posts", "category pages", "static pages"],\n      update: "Regenerated on build"\n    },\n    performance: {\n      images: "Next.js Image component with optimization",\n      fonts: "Font optimization with next/font",\n      caching: "Static generation with ISR for fresh content"\n    },\n    accessibility: {\n      standards: "WCAG 2.1 AA compliance",\n      features: ["alt text", "semantic HTML", "keyboard navigation"],\n      testing: "Automated accessibility testing"\n    }\n  },\n  \n  // 7. Performance Optimizations\n  performance: {\n    codesplitting: {\n      automatic: "Next.js automatic code splitting",\n      dynamic: "Dynamic imports for heavy components",\n      routes: "Route-based code splitting"\n    },\n    images: {\n      optimization: "Next.js Image component",\n      formats: "WebP with fallbacks",\n      lazy: "Lazy loading by default"\n    },\n    caching: {\n      static: "Static generation for most content",\n      isr: "Incremental Static Regeneration for dynamic content",\n      cdn: "CDN caching for static assets"\n    },\n    bundleAnalysis: {\n      tool: "@next/bundle-analyzer",\n      monitoring: "Bundle size monitoring in CI/CD"\n    }\n  },\n  \n  // 8. Development Workflow\n  development: {\n    environment: {\n      local: "Development server with hot reloading",\n      staging: "Preview deployments for testing",\n      production: "Optimized production builds"\n    },\n    contentManagement: {\n      approach: "Markdown files with frontmatter",\n      location: "content/ directory",\n      processing: "gray-matter for frontmatter parsing"\n    },\n    deployment: {\n      platform: "Vercel (optimal for Next.js)",\n      cicd: "Automatic deployments from Git",\n      preview: "Preview deployments for pull requests"\n    }\n  },\n  \n  // 9. Features Implementation\n  features: {\n    core: {\n      blogPosts: "Markdown-based posts with frontmatter",\n      categories: "Hierarchical category system",\n      tags: "Tag-based post organization",\n      search: "Full-text search functionality",\n      comments: "Comment system with moderation"\n    },\n    advanced: {\n      newsletter: "Email subscription system",\n      rss: "RSS feed generation",\n      analytics: "Google Analytics integration",\n      socialSharing: "Social media sharing buttons",\n      relatedPosts: "Algorithm-based post recommendations"\n    },\n    admin: {\n      dashboard: "Admin interface for content management",\n      editor: "Rich text editor for posts",\n      media: "Image upload and management",\n      analytics: "Content performance analytics"\n    }\n  }\n};\n\n// Implementation Priority\nconst implementationPhases = {\n  phase1: {\n    title: "Core Blog Functionality",\n    duration: "2-3 weeks",\n    features: [\n      "Basic page structure",\n      "Post listing and detail pages",\n      "Static generation setup",\n      "Basic styling with Tailwind"\n    ]\n  },\n  phase2: {\n    title: "Enhanced Features",\n    duration: "2 weeks", \n    features: [\n      "Categories and tags",\n      "Search functionality",\n      "Comment system",\n      "SEO optimization"\n    ]\n  },\n  phase3: {\n    title: "Advanced Features",\n    duration: "2 weeks",\n    features: [\n      "Admin dashboard",\n      "Newsletter integration",\n      "Analytics setup",\n      "Performance optimization"\n    ]\n  },\n  phase4: {\n    title: "Polish and Deploy",\n    duration: "1 week",\n    features: [\n      "Testing and bug fixes",\n      "Accessibility improvements",\n      "Production deployment",\n      "Monitoring setup"\n    ]\n  }\n};\n\nconsole.log("=== NEXT.JS BLOG APPLICATION PLAN ===");\nconsole.log("\\nüìÅ File Structure:");\nconsole.log("- Pages:", Object.keys(blogAppPlan.fileStructure.pages).length);\nconsole.log("- API Routes:", Object.keys(blogAppPlan.fileStructure.api).length);\nconsole.log("- Components:", Object.keys(blogAppPlan.fileStructure.components).length);\n\nconsole.log("\\nüîÑ Data Fetching:");\nObject.entries(blogAppPlan.dataFetching).forEach(([page, config]) => {\n  console.log(`- ${page}: ${config.method}`);\n});\n\nconsole.log("\\nüé® Styling:");\nconsole.log(`- Approach: ${blogAppPlan.styling.approach}`);\nconsole.log(`- Theme: ${Object.keys(blogAppPlan.styling.theme.colors).length} colors defined`);\n\nconsole.log("\\nüöÄ Implementation Phases:");\nObject.entries(implementationPhases).forEach(([phase, details]) => {\n  console.log(`- ${details.title}: ${details.duration}`);\n});\n\nconsole.log("\\n‚úÖ Plan Complete! Ready to start building the Next.js blog.");'
          }
        }
      }
    ]
  },
  {
    id: 'sql',
    title: 'SQL Databases',
    description: 'Manage data with SQL',
    icon: 'üóÉÔ∏è',
    color: 'from-indigo-400 to-purple-500',
    totalLessons: 10,
    estimatedHours: 7,
    lessons: [
      {
        id: 'sql-1',
        title: 'Introduction to Databases and SQL',
        description: 'Understand databases, SQL basics, and relational database concepts',
        duration: '40 min',
        difficulty: 'beginner',
        estimatedTime: 40,
        content: {
          theory: 'A database is an organized collection of data stored electronically. SQL (Structured Query Language) is the standard language for managing relational databases. Relational databases organize data into tables with rows and columns, where relationships between tables are established through keys. Understanding these fundamentals is essential for data management in applications.',
          examples: [
            '-- What is a Database?\n-- A database is like a digital filing cabinet that stores information\n-- in an organized, searchable way.\n\n-- Types of Databases:\n-- 1. Relational Databases (SQL): MySQL, PostgreSQL, SQLite, SQL Server\n-- 2. NoSQL Databases: MongoDB, Redis, Cassandra\n-- 3. Graph Databases: Neo4j\n-- 4. Time-series Databases: InfluxDB\n\n-- What is SQL?\n-- SQL (Structured Query Language) is used to:\n-- ‚Ä¢ Query data (SELECT)\n-- ‚Ä¢ Insert new data (INSERT)\n-- ‚Ä¢ Update existing data (UPDATE)\n-- ‚Ä¢ Delete data (DELETE)\n-- ‚Ä¢ Create and modify database structure (CREATE, ALTER, DROP)\n\n-- Basic Database Concepts:\n\n-- 1. Tables: Store data in rows and columns\n-- Example: users table\n/*\n+----+----------+------------------+-----+\n| id | name     | email            | age |\n+----+----------+------------------+-----+\n| 1  | Alice    | alice@email.com  | 25  |\n| 2  | Bob      | bob@email.com    | 30  |\n| 3  | Carol    | carol@email.com  | 28  |\n+----+----------+------------------+-----+\n*/\n\n-- 2. Columns (Fields): Define the type of data stored\n-- Common data types:\n-- ‚Ä¢ INTEGER: Whole numbers (1, 2, 3)\n-- ‚Ä¢ VARCHAR(n): Text with maximum length n\n-- ‚Ä¢ TEXT: Long text\n-- ‚Ä¢ DATE: Dates (2024-01-15)\n-- ‚Ä¢ BOOLEAN: True/False values\n-- ‚Ä¢ DECIMAL: Numbers with decimal places\n\n-- 3. Rows (Records): Individual entries in a table\n-- Each row represents one complete record\n\n-- 4. Primary Key: Unique identifier for each row\n-- Usually an ID column that auto-increments\n\n-- 5. Foreign Key: Links to primary key in another table\n-- Creates relationships between tables\n\n-- Creating a Simple Database Structure:\n\n-- Create a users table\nCREATE TABLE users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    age INTEGER,\n    created_at DATE DEFAULT CURRENT_DATE\n);\n\n-- Create a posts table (related to users)\nCREATE TABLE posts (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title VARCHAR(200) NOT NULL,\n    content TEXT,\n    user_id INTEGER,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n);\n\n-- Insert sample data\nINSERT INTO users (name, email, age) VALUES\n(\'Alice Johnson\', \'alice@email.com\', 25),\n(\'Bob Smith\', \'bob@email.com\', 30),\n(\'Carol Davis\', \'carol@email.com\', 28);\n\nINSERT INTO posts (title, content, user_id) VALUES\n(\'My First Post\', \'This is my first blog post!\', 1),\n(\'Learning SQL\', \'SQL is really useful for managing data.\', 1),\n(\'Database Design\', \'Good database design is crucial.\', 2);\n\n-- Basic SQL Queries:\n\n-- 1. SELECT: Retrieve data\nSELECT * FROM users;  -- Get all users\nSELECT name, email FROM users;  -- Get specific columns\nSELECT * FROM users WHERE age > 25;  -- Filter results\n\n-- 2. INSERT: Add new data\nINSERT INTO users (name, email, age) \nVALUES (\'David Wilson\', \'david@email.com\', 32);\n\n-- 3. UPDATE: Modify existing data\nUPDATE users \nSET age = 26 \nWHERE name = \'Alice Johnson\';\n\n-- 4. DELETE: Remove data\nDELETE FROM users \nWHERE age < 20;\n\n-- Relationships Between Tables:\n\n-- One-to-Many: One user can have many posts\nSELECT users.name, posts.title\nFROM users\nJOIN posts ON users.id = posts.user_id;\n\n-- Database Design Principles:\n\n-- 1. Normalization: Organize data to reduce redundancy\n-- Instead of storing user info in every post:\n-- Good: posts table references users table\n-- Bad: posts table contains duplicate user info\n\n-- 2. Data Integrity: Ensure data accuracy and consistency\n-- ‚Ä¢ Primary keys ensure unique records\n-- ‚Ä¢ Foreign keys maintain relationships\n-- ‚Ä¢ Constraints prevent invalid data\n\n-- 3. Indexing: Speed up data retrieval\nCREATE INDEX idx_user_email ON users(email);\nCREATE INDEX idx_post_user_id ON posts(user_id);\n\n-- Common SQL Commands Summary:\n\n-- Data Definition Language (DDL):\n-- CREATE TABLE, ALTER TABLE, DROP TABLE\n-- CREATE INDEX, DROP INDEX\n\n-- Data Manipulation Language (DML):\n-- SELECT, INSERT, UPDATE, DELETE\n\n-- Data Control Language (DCL):\n-- GRANT, REVOKE (for permissions)\n\n-- Transaction Control:\n-- BEGIN, COMMIT, ROLLBACK\n\n-- Example: Complete workflow\n-- 1. Design your tables\n-- 2. Create the database structure\n-- 3. Insert initial data\n-- 4. Query and manipulate data as needed\n-- 5. Maintain and optimize over time\n\n-- Best Practices:\n-- ‚Ä¢ Use meaningful table and column names\n-- ‚Ä¢ Always define primary keys\n-- ‚Ä¢ Use appropriate data types\n-- ‚Ä¢ Add constraints to ensure data quality\n-- ‚Ä¢ Create indexes for frequently queried columns\n-- ‚Ä¢ Regular backups of important data\n\n-- SQL is powerful because it:\n-- ‚Ä¢ Provides a standard way to work with data\n-- ‚Ä¢ Handles complex queries efficiently\n-- ‚Ä¢ Ensures data integrity and consistency\n-- ‚Ä¢ Scales from small to very large datasets\n-- ‚Ä¢ Is supported by many programming languages'
          ],
          challenge: {
            title: 'Design Your First Database',
            description: 'Create a database schema for a simple library management system.',
            starterCode: '-- Library Management System Database Design\n-- Create tables for books, authors, members, and borrowing records\n\n-- TODO: Design and create the following tables:\n-- 1. authors (id, name, birth_year, nationality)\n-- 2. books (id, title, author_id, isbn, publication_year, available_copies)\n-- 3. members (id, name, email, phone, join_date)\n-- 4. borrowings (id, book_id, member_id, borrow_date, due_date, return_date)\n\n-- Create your tables here:\n\n-- Insert sample data:\n\n-- Write some basic queries:\n',
            solution: '-- Library Management System Database Design\n-- Create tables for books, authors, members, and borrowing records\n\n-- 1. Create authors table\nCREATE TABLE authors (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name VARCHAR(100) NOT NULL,\n    birth_year INTEGER,\n    nationality VARCHAR(50),\n    created_at DATE DEFAULT CURRENT_DATE\n);\n\n-- 2. Create books table\nCREATE TABLE books (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title VARCHAR(200) NOT NULL,\n    author_id INTEGER NOT NULL,\n    isbn VARCHAR(20) UNIQUE,\n    publication_year INTEGER,\n    genre VARCHAR(50),\n    available_copies INTEGER DEFAULT 1,\n    total_copies INTEGER DEFAULT 1,\n    created_at DATE DEFAULT CURRENT_DATE,\n    FOREIGN KEY (author_id) REFERENCES authors(id)\n);\n\n-- 3. Create members table\nCREATE TABLE members (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    phone VARCHAR(20),\n    address TEXT,\n    join_date DATE DEFAULT CURRENT_DATE,\n    membership_type VARCHAR(20) DEFAULT \'standard\',\n    active BOOLEAN DEFAULT TRUE\n);\n\n-- 4. Create borrowings table\nCREATE TABLE borrowings (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    book_id INTEGER NOT NULL,\n    member_id INTEGER NOT NULL,\n    borrow_date DATE DEFAULT CURRENT_DATE,\n    due_date DATE NOT NULL,\n    return_date DATE,\n    fine_amount DECIMAL(10,2) DEFAULT 0.00,\n    status VARCHAR(20) DEFAULT \'borrowed\',\n    FOREIGN KEY (book_id) REFERENCES books(id),\n    FOREIGN KEY (member_id) REFERENCES members(id)\n);\n\n-- Create indexes for better performance\nCREATE INDEX idx_books_author_id ON books(author_id);\nCREATE INDEX idx_books_isbn ON books(isbn);\nCREATE INDEX idx_members_email ON members(email);\nCREATE INDEX idx_borrowings_book_id ON borrowings(book_id);\nCREATE INDEX idx_borrowings_member_id ON borrowings(member_id);\nCREATE INDEX idx_borrowings_status ON borrowings(status);\n\n-- Insert sample authors\nINSERT INTO authors (name, birth_year, nationality) VALUES\n(\'J.K. Rowling\', 1965, \'British\'),\n(\'George Orwell\', 1903, \'British\'),\n(\'Harper Lee\', 1926, \'American\'),\n(\'F. Scott Fitzgerald\', 1896, \'American\'),\n(\'Jane Austen\', 1775, \'British\'),\n(\'Mark Twain\', 1835, \'American\'),\n(\'Agatha Christie\', 1890, \'British\');\n\n-- Insert sample books\nINSERT INTO books (title, author_id, isbn, publication_year, genre, available_copies, total_copies) VALUES\n(\'Harry Potter and the Philosopher\\\'s Stone\', 1, \'978-0747532699\', 1997, \'Fantasy\', 3, 5),\n(\'Harry Potter and the Chamber of Secrets\', 1, \'978-0747538493\', 1998, \'Fantasy\', 2, 3),\n(\'1984\', 2, \'978-0451524935\', 1949, \'Dystopian Fiction\', 4, 6),\n(\'Animal Farm\', 2, \'978-0451526342\', 1945, \'Political Satire\', 2, 4),\n(\'To Kill a Mockingbird\', 3, \'978-0061120084\', 1960, \'Fiction\', 3, 5),\n(\'The Great Gatsby\', 4, \'978-0743273565\', 1925, \'Classic Fiction\', 2, 4),\n(\'Pride and Prejudice\', 5, \'978-0141439518\', 1813, \'Romance\', 3, 4),\n(\'The Adventures of Tom Sawyer\', 6, \'978-0486400778\', 1876, \'Adventure\', 2, 3),\n(\'Murder on the Orient Express\', 7, \'978-0062693662\', 1934, \'Mystery\', 2, 3);\n\n-- Insert sample members\nINSERT INTO members (name, email, phone, address, membership_type) VALUES\n(\'Alice Johnson\', \'alice.johnson@email.com\', \'555-0101\', \'123 Main St, City\', \'premium\'),\n(\'Bob Smith\', \'bob.smith@email.com\', \'555-0102\', \'456 Oak Ave, City\', \'standard\'),\n(\'Carol Davis\', \'carol.davis@email.com\', \'555-0103\', \'789 Pine Rd, City\', \'standard\'),\n(\'David Wilson\', \'david.wilson@email.com\', \'555-0104\', \'321 Elm St, City\', \'premium\'),\n(\'Eve Brown\', \'eve.brown@email.com\', \'555-0105\', \'654 Maple Dr, City\', \'standard\'),\n(\'Frank Miller\', \'frank.miller@email.com\', \'555-0106\', \'987 Cedar Ln, City\', \'standard\');\n\n-- Insert sample borrowings\nINSERT INTO borrowings (book_id, member_id, borrow_date, due_date, return_date, status) VALUES\n-- Current borrowings\n(1, 1, \'2024-01-15\', \'2024-02-15\', NULL, \'borrowed\'),\n(3, 2, \'2024-01-20\', \'2024-02-20\', NULL, \'borrowed\'),\n(5, 3, \'2024-01-25\', \'2024-02-25\', NULL, \'borrowed\'),\n(7, 4, \'2024-01-10\', \'2024-02-10\', NULL, \'overdue\'),\n\n-- Returned books\n(2, 1, \'2024-01-01\', \'2024-02-01\', \'2024-01-28\', \'returned\'),\n(4, 2, \'2024-01-05\', \'2024-02-05\', \'2024-01-30\', \'returned\'),\n(6, 5, \'2024-01-08\', \'2024-02-08\', \'2024-02-05\', \'returned\'),\n(8, 6, \'2024-01-12\', \'2024-02-12\', \'2024-02-10\', \'returned\');\n\n-- Update available copies based on current borrowings\nUPDATE books SET available_copies = available_copies - 1 WHERE id IN (1, 3, 5, 7);\n\n-- Basic Queries to Test the Database:\n\n-- 1. Get all books with their authors\nSELECT \n    books.title,\n    authors.name AS author_name,\n    books.publication_year,\n    books.genre,\n    books.available_copies\nFROM books\nJOIN authors ON books.author_id = authors.id\nORDER BY books.title;\n\n-- 2. Find all currently borrowed books\nSELECT \n    books.title,\n    authors.name AS author,\n    members.name AS borrowed_by,\n    borrowings.borrow_date,\n    borrowings.due_date,\n    CASE \n        WHEN borrowings.due_date < CURRENT_DATE THEN \'Overdue\'\n        ELSE \'On Time\'\n    END AS status\nFROM borrowings\nJOIN books ON borrowings.book_id = books.id\nJOIN authors ON books.author_id = authors.id\nJOIN members ON borrowings.member_id = members.id\nWHERE borrowings.return_date IS NULL\nORDER BY borrowings.due_date;\n\n-- 3. Get member borrowing history\nSELECT \n    members.name AS member_name,\n    books.title,\n    borrowings.borrow_date,\n    borrowings.return_date,\n    borrowings.status\nFROM members\nJOIN borrowings ON members.id = borrowings.member_id\nJOIN books ON borrowings.book_id = books.id\nWHERE members.name = \'Alice Johnson\'\nORDER BY borrowings.borrow_date DESC;\n\n-- 4. Find available books by genre\nSELECT \n    books.title,\n    authors.name AS author,\n    books.available_copies\nFROM books\nJOIN authors ON books.author_id = authors.id\nWHERE books.genre = \'Fantasy\' AND books.available_copies > 0\nORDER BY books.title;\n\n-- 5. Get library statistics\nSELECT \n    \'Total Books\' AS metric,\n    COUNT(*) AS value\nFROM books\nUNION ALL\nSELECT \n    \'Total Authors\' AS metric,\n    COUNT(*) AS value\nFROM authors\nUNION ALL\nSELECT \n    \'Total Members\' AS metric,\n    COUNT(*) AS value\nFROM members\nUNION ALL\nSELECT \n    \'Currently Borrowed\' AS metric,\n    COUNT(*) AS value\nFROM borrowings\nWHERE return_date IS NULL;\n\n-- 6. Find overdue books\nSELECT \n    books.title,\n    members.name AS member_name,\n    members.email,\n    borrowings.due_date,\n    (julianday(\'now\') - julianday(borrowings.due_date)) AS days_overdue\nFROM borrowings\nJOIN books ON borrowings.book_id = books.id\nJOIN members ON borrowings.member_id = members.id\nWHERE borrowings.return_date IS NULL \n  AND borrowings.due_date < CURRENT_DATE\nORDER BY days_overdue DESC;\n\n-- 7. Most popular books (most borrowed)\nSELECT \n    books.title,\n    authors.name AS author,\n    COUNT(borrowings.id) AS times_borrowed\nFROM books\nJOIN authors ON books.author_id = authors.id\nLEFT JOIN borrowings ON books.id = borrowings.book_id\nGROUP BY books.id, books.title, authors.name\nORDER BY times_borrowed DESC\nLIMIT 5;\n\n-- 8. Members with most borrowings\nSELECT \n    members.name,\n    members.membership_type,\n    COUNT(borrowings.id) AS total_borrowings,\n    COUNT(CASE WHEN borrowings.return_date IS NULL THEN 1 END) AS current_borrowings\nFROM members\nLEFT JOIN borrowings ON members.id = borrowings.member_id\nGROUP BY members.id, members.name, members.membership_type\nORDER BY total_borrowings DESC;\n\n-- Database Design Summary:\n-- ‚úÖ Created 4 related tables with proper relationships\n-- ‚úÖ Used appropriate data types and constraints\n-- ‚úÖ Added indexes for performance\n-- ‚úÖ Included sample data for testing\n-- ‚úÖ Wrote queries to demonstrate functionality\n-- ‚úÖ Handles common library operations:\n--     - Track book inventory\n--     - Manage member information\n--     - Record borrowing transactions\n--     - Monitor overdue books\n--     - Generate reports and statistics'
          }
        }
      }
    ]
  }
];